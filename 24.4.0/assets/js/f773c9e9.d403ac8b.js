"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[4930],{5680:(e,a,t)=>{t.d(a,{xA:()=>p,yg:()=>y});var n=t(6540);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=n.createContext({}),d=function(e){var a=n.useContext(r),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=d(e.components);return n.createElement(r.Provider,{value:a},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,s=e.originalType,r=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),g=l,y=u["".concat(r,".").concat(g)]||u[g]||c[g]||s;return t?n.createElement(y,i(i({ref:a},p),{},{components:t})):n.createElement(y,i({ref:a},p))}));function y(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var s=t.length,i=new Array(s);i[0]=g;var o={};for(var r in a)hasOwnProperty.call(a,r)&&(o[r]=a[r]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var d=2;d<s;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5476:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=t(8168),l=(t(6540),t(5680));const s={},i=void 0,o={unversionedId:"api/d2/widgets/task.details.panel/task.details.panel.view",id:"api/d2/widgets/task.details.panel/task.details.panel.view",title:"task.details.panel.view",description:"TaskDetailsPanelView : d2/sdk/widgets/task.details.panel/task.details.panel.view",source:"@site/articles/api/d2/widgets/task.details.panel/task.details.panel.view.md",sourceDirName:"api/d2/widgets/task.details.panel",slug:"/api/d2/widgets/task.details.panel/task.details.panel.view",permalink:"/d2sv-sdk/24.4.0/api/d2/widgets/task.details.panel/task.details.panel.view",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"shortcut.tile.behaviors",permalink:"/d2sv-sdk/24.4.0/api/d2/widgets/shortcut.tile/shortcut.tile.behaviors"},next:{title:"task.details.panel.views",permalink:"/d2sv-sdk/24.4.0/api/d2/widgets/task.details.panel/task.details.panel.views"}},r={},d=[{value:"TaskDetailsPanelView : <code>d2/sdk/widgets/task.details.panel/task.details.panel.view</code>",id:"taskdetailspanelview--d2sdkwidgetstaskdetailspaneltaskdetailspanelview",level:2},{value:"taskDetailsPanelView.options : <code>Object</code>",id:"taskdetailspanelviewoptions--object",level:3},{value:"taskDetailsPanelView.model : <code>NodeModel</code>",id:"taskdetailspanelviewmodel--nodemodel",level:3},{value:"TaskDetailsPanelView.enabled(options) \u21d2 <code>boolean</code>",id:"taskdetailspanelviewenabledoptions--boolean",level:3}],p={toc:d},u="wrapper";function c(e){let{components:a,...t}=e;return(0,l.yg)(u,(0,n.A)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("a",{name:"module_TaskDetailsPanelView"}),(0,l.yg)("h2",{id:"taskdetailspanelview--d2sdkwidgetstaskdetailspaneltaskdetailspanelview"},"TaskDetailsPanelView : ",(0,l.yg)("code",null,"d2/sdk/widgets/task.details.panel/task.details.panel.view")),(0,l.yg)("p",null,"Interface for all custom task details views.\nThis is an extension of Marionette Layout View"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Extends"),": ",(0,l.yg)("a",{parentName:"p",href:"https://marionettejs.com/docs/v2.4.7/marionette.layoutview.html"},(0,l.yg)("code",null,"Marionette.LayoutView")),(0,l.yg)("br",{parentName:"p"}),"\n",(0,l.yg)("strong",{parentName:"p"},"Example")," ",(0,l.yg)("em",{parentName:"p"},"(A new task details view task.helloworld.view.js could be defined as)"),"  "),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"define([\n  'd2/sdk/widgets/task.details.panel/task.details.panel.view'\n], function (TaskDetailsPanelViews) {\n  'use strict';\n\n  var helloworldViewTemplate = '<script type=\"text/html\">' +\n      '<h3 style=\"\\n' +\n      '    padding: 16px;\\n' +\n      '    font-size: 24px;\\n' +\n      '    color: red;\\n' +\n      '\">Hello World !</h3>' +\n      '<\/script>';\n\n  var TaskHelloworldView = TaskDetailsPanelViews.extend({\n    template: helloworldViewTemplate\n  }, {\n    enabled: function () {\n      // This task details view will be shown or hidden based on whether\n      //       the enabled function returns true or false\n      return true;\n    }\n  });\n\n  return TaskHelloworldView;\n});\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")," ",(0,l.yg)("em",{parentName:"p"},"(Suppose we want to show this task details view for only those task where assignee is dmadmin, we can write a simple equality check for node","'","s type and assignee attributes and using ",(0,l.yg)("a",{parentName:"em",href:"../../utils/constants"},"constants")," utils from sdk)"),"  "),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"   enabled: function (options) {\n       var nodeType = options.node.get('type'),\n           assignee = options.node && options.node.get('assignee');\n\n       if (nodeType === constants.Types.TASK &&\n           assignee === 'dmadmin') {\n           return true;\n       }\n\n       return false;\n   }\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")," ",(0,l.yg)("em",{parentName:"p"},"(To register this task details view with task details panel views array, add the entry in extension.json as)"),"  "),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'{\n  "d2/sdk/widgets/task.details.panel/task.details.panel.views": {\n     "extensions": {\n       "mybundle": [\n         "mybundle/extensions/task.details.panel.views"\n       ]\n     }\n   }\n}\n')),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")," ",(0,l.yg)("em",{parentName:"p"},"(The task.details.panel.views.js is defined as below. Optionally a sequence value(greater than 1000) can be passed to the task details view entry to specify their order in the tab panel)"),"  "),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"define([\n   'mybundle/widgets/task.details/panels/helloworld/task.helloworld.view'\n], function(TaskHelloworldView){\n   'use strict';\n\n   // Array of task details views added to the plugin\n   return [\n\n     // Each task details view entry should have a name, title to be shown for the tab\n     //     and the content view to be shown on the task details panel when this tab is selected\n\n     // Incase multiple task details views(tabs) are added in a plugin or multiple plugins with tabs are\n     //     deployed, then the order of these tabs in tab panel are determined at runtime.\n     //     If tabs are to be placed in specific sequence in tab panel,\n     //     then add a numeric value greater than 1000 for sequence attribute(values upto 1000 are used internally).\n     //     The tabs should appear in ascending order of their sequence in tab panel\n     {\n            name: 'helloworld', // The task details tab name, it has to be a unique string\n            title: 'Hello World',\n            contentView: TaskHelloworldView,\n            sequence: 1010 // The sequence value determines the order in which these tabs appear in the tab panel\n     }\n\n     // Additional task details views can also be registered in this array\n   ];\n});\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"#module_TaskDetailsPanelView"},"TaskDetailsPanelView")," : ",(0,l.yg)("code",null,"d2/sdk/widgets/task.details.panel/task.details.panel.view"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("em",{parentName:"li"},"instance"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"#module_TaskDetailsPanelView+options"},".options")," : ",(0,l.yg)("code",null,"Object")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"#module_TaskDetailsPanelView+model"},".model")," : ",(0,l.yg)("code",null,"NodeModel")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("em",{parentName:"li"},"static"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"#module_TaskDetailsPanelView.enabled"},".enabled([options])")," \u21d2 ",(0,l.yg)("code",null,"boolean"))))))),(0,l.yg)("a",{name:"module_TaskDetailsPanelView+options"}),(0,l.yg)("h3",{id:"taskdetailspanelviewoptions--object"},"taskDetailsPanelView.options : ",(0,l.yg)("code",null,"Object")),(0,l.yg)("p",null,"Holder of parameters passed during task details view construction."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Kind"),": instance property of ",(0,l.yg)("a",{parentName:"p",href:"#module_TaskDetailsPanelView"},(0,l.yg)("code",null,"TaskDetailsPanelView")),"  "),(0,l.yg)("a",{name:"module_TaskDetailsPanelView+model"}),(0,l.yg)("h3",{id:"taskdetailspanelviewmodel--nodemodel"},"taskDetailsPanelView.model : ",(0,l.yg)("code",null,"NodeModel")),(0,l.yg)("p",null,"Selected task/workflow reference. It holds information like task/workflow id, name, type etc."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Kind"),": instance property of ",(0,l.yg)("a",{parentName:"p",href:"#module_TaskDetailsPanelView"},(0,l.yg)("code",null,"TaskDetailsPanelView")),(0,l.yg)("br",{parentName:"p"}),"\n",(0,l.yg)("strong",{parentName:"p"},"See"),": ",(0,l.yg)("a",{parentName:"p",href:"../../models/node.model"},"NodeModel"),"  "),(0,l.yg)("a",{name:"module_TaskDetailsPanelView.enabled"}),(0,l.yg)("h3",{id:"taskdetailspanelviewenabledoptions--boolean"},"TaskDetailsPanelView.enabled(","[options]",") \u21d2 ",(0,l.yg)("code",null,"boolean")),(0,l.yg)("p",null,"Decides whether to show or hide tab for this task details view based on the return value(true or false)."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Kind"),": static method of ",(0,l.yg)("a",{parentName:"p",href:"#module_TaskDetailsPanelView"},(0,l.yg)("code",null,"TaskDetailsPanelView")),"  "),(0,l.yg)("table",null,(0,l.yg)("thead",null,(0,l.yg)("tr",null,(0,l.yg)("th",null,"Param"),(0,l.yg)("th",null,"Type"),(0,l.yg)("th",null,"Description"))),(0,l.yg)("tbody",null,(0,l.yg)("tr",null,(0,l.yg)("td",null,"[options]"),(0,l.yg)("td",null,(0,l.yg)("code",null,"Object")),(0,l.yg)("td",null,(0,l.yg)("p",null,"The options object will have the selected task/workflow and context details. The options.node will have the selected ",(0,l.yg)("a",{href:"../../models/node.model"},"task/workflow")," reference and it contains information about task/workflow attributes like id, name etc. Conditions can be added based on these attributes to return true/false (show/hide the tab for the selected task/workflow)."))),"  ")))}c.isMDXComponent=!0}}]);