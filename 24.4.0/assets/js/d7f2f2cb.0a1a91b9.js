"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[5415],{5680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>g});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=s(t),p=i,g=u["".concat(l,".").concat(p)]||u[p]||d[p]||a;return t?r.createElement(g,o(o({ref:n},m),{},{components:t})):r.createElement(g,o({ref:n},m))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},792:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=t(8168),i=(t(6540),t(5680));const a={sidebar_position:1.1,sidebar_label:"Create custom service method for generic(calling service's method) menu action",description:"Create your own D2 action service invocable through menu"},o="Creating custom service method and callback function",c={unversionedId:"general/howto/1_10_create_custom_service_and_callback_action",id:"general/howto/1_10_create_custom_service_and_callback_action",title:"Creating custom service method and callback function",description:"Create your own D2 action service invocable through menu",source:"@site/articles/general/howto/1_10_create_custom_service_and_callback_action.md",sourceDirName:"general/howto",slug:"/general/howto/1_10_create_custom_service_and_callback_action",permalink:"/d2sv-sdk/24.4.0/general/howto/1_10_create_custom_service_and_callback_action",draft:!1,tags:[],version:"current",sidebarPosition:1.1,frontMatter:{sidebar_position:1.1,sidebar_label:"Create custom service method for generic(calling service's method) menu action",description:"Create your own D2 action service invocable through menu"},sidebar:"general",previous:{title:"Use external widget in Documentum Client",permalink:"/d2sv-sdk/24.4.0/general/howto/1_07_external_widgets"},next:{title:"Licensing implementation",permalink:"/d2sv-sdk/24.4.0/general/howto/1_11_use_licensing"}},l={},s=[{value:"Source code structure",id:"source-code-structure",level:3},{value:"Files and their purpose",id:"files-and-their-purpose",level:3}],m={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,r.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"creating-custom-service-method-and-callback-function"},"Creating custom service method and callback function"),(0,i.yg)("p",null,"D2SV's call service command lets user execute a method from an external service class and\nperform actions on the UI based on the response sent back through javascript callback function."),(0,i.yg)("p",null,"There are basically 4 part of the generic action service"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("em",{parentName:"p"},"eService")," - Existing services or some custom java class from which code needs to\nbe  executed.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("em",{parentName:"p"},"eMethod")," - Method in eService where it needs to execute a functionality.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("em",{parentName:"p"},"rType")," - Type of operation to be performed in the client side post server side execution\nThere are 3 types of post execution"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"JS - a custome javascript method is triggered"),(0,i.yg)("li",{parentName:"ul"},"EVENT - Trigger an event "),(0,i.yg)("li",{parentName:"ul"},"NATIVE - open the result in a new browser tab."))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("em",{parentName:"p"},"rAction")," - Action to be performed based on the ",(0,i.yg)("em",{parentName:"p"},"rType")),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"For JS, develop  specify the path of the JS file with method separated by a colon.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Example : d2svomni/actions/clipboard.actions:copyId"),(0,i.yg)("p",{parentName:"li"},"Here it means that it will execute a method called copyId which has input argument that returns response\nsent from the ",(0,i.yg)("em",{parentName:"p"},"eMethod"),". Details can be seen ine sample given in the below section.")))),(0,i.yg)("li",{parentName:"ul"},"For EVENT: event name and message parameter separated by '::'.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Example: D2_ACTION_SEARCH_DOCUMENT::oam_id==lastSearch\nHere documentum client will publish an event D2_ACTION_SEARCH_DOCUMENT with the message id as the lastSearch which will route\nthe application to the last search executed by the user. "))),(0,i.yg)("li",{parentName:"ul"},"For NATIVE: ",(0,i.yg)("em",{parentName:"li"},"openUrlInPopup")," is specified which will open the URL returned as part of the action services executed",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Example: as part of the ",(0,i.yg)("em",{parentName:"li"},"eMethod")," which returns a list of Attributes, add an attribute with name\n'RETURNED' or 'URL' which will be opened in the new browser tab")))))),(0,i.yg)("p",null,"For implementing a menu with generic action, user can either reuse an existing service method\nand callback function or create a new custom java service class with the method definition and javascript file\nwith the callback function."),(0,i.yg)("p",null,"The below section illustrate how to create custom service method and callback function and use them in the menu definition\ndelta xml for the D2SVOmni plugin under com.opentext.test group."),(0,i.yg)("h3",{id:"source-code-structure"},"Source code structure"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"D2SVOmni\n|\n|   pom.xml\n|   \n\\---src\n|   \\---main\n|       \\---java\n|       |   \\---com   \n|       |       \\---opentext\n|       |           \\---test\n|       |               \\---webfs\n|       |                   \\---custom\n|       |                           D2SVOmniService.java\n|       |\n|       \\---resources\n|       |   \\---strings\n|       |   |   \\---menu\n|       |   |       \\---MenuContext\n|       |   |               MenuContext_en.properties\n|       |   |\n|       |   \\---xml\n|       |       \\---unitymenu\n|       |               MenuContextDelta.xml\n|       |                                                    \n|       \\---smartview\n|           \\---src\n|               \\---bundles\n|               |       d2svomni-bundle.js\n|               |       \n|               \\---actions\n|                       clipboard.actions.js\n|                   \n\\---target\n")),(0,i.yg)("h3",{id:"files-and-their-purpose"},"Files and their purpose"),(0,i.yg)("p",null,"Following are the list of function oriented source files and their purpose. Other source files present within the plugin are part of\ncommon infrastructure code and explained in ",(0,i.yg)("a",{parentName:"p",href:"../understand.d2sv.plugin"},"Understanding D2SV plugin project"),"."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"src/main/resources/strings/menu/MenuContext/MenuContext_en.properties - Add label for the custom menu")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"menutest=CopyId\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"src/main/resources/xml/unitymenu/MenuContextDelta.xml - Add menu definition for the custom menu")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<delta>\n    <insert position-after="menuToolsMassUpdate">\n        <menuitem action="" id="menutest">\n            <dynamic-action class="com.emc.d2fs.dctm.ui.dynamicactions.actions.U4Generic" eMethod="copySelectedId" eMode="MULTI" eService="D2SVOmniService" rAction="d2svomni/actions/clipboard.actions:copyId" rType="JS"/>\n        </menuitem>\n  </insert>\n</delta>\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"src/main/java/com/opentext/test/webfs/custom/D2SVOmniService.java - Custom D2SVOmniService class with copySelectedId method.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'package com.opentext.test.d2svomni.webfs.custom;\n\nimport com.documentum.fc.client.IDfSysObject;\nimport com.documentum.fc.common.DfException;\nimport com.documentum.fc.common.DfId;\nimport com.emc.d2fs.dctm.plugin.IPluginAction;\nimport com.emc.d2fs.dctm.utils.ParameterParser;\nimport com.emc.d2fs.dctm.web.services.D2fsContext;\nimport com.emc.d2fs.exceptions.D2fsException;\nimport com.emc.d2fs.dctm.web.services.ID2fsPlugin;\nimport com.emc.d2fs.models.attribute.Attribute;\nimport com.emc.d2fs.utils.AttributeUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.opentext.test.d2svomni.D2SVOmniPlugin;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class D2SVOmniService implements IPluginAction {\n    private static final ID2fsPlugin VERSION = new D2SVOmniPlugin();\n    private static final Logger LOGGER = LoggerFactory.getLogger(D2SVOmniService.class);\n\n    public List<Attribute> copySelectedId(D2fsContext context) throws D2fsException {\n        LOGGER.debug("copySelectedId()...");\n        ParameterParser parser = context.getParameterParser();\n        List<String> ids = parser.getListParameter("id");\n        String aName = parser.getStringParameter("aName", "");\n        List<Attribute> result = new ArrayList<>();\n        if (aName.isBlank() || aName.equals("r_object_id")) {\n            String idString = String.join("\xac", ids);\n            LOGGER.debug("Selected id(s): {}", idString);\n            result.add(AttributeUtils.createAttribute("id", idString));\n        } else {\n            List<String> attrValues = new ArrayList<>();\n            StringBuilder sb = new StringBuilder();\n            try {\n                for (String id : ids) {\n                    IDfSysObject sObj = (IDfSysObject) context.getSession().getObject(new DfId(id));\n                    if (sObj.hasAttr(aName)) {\n                        attrValues.add(sObj.getString(aName));\n                    }\n                }\n                String valString = String.join("\xac", attrValues);\n                result.add(AttributeUtils.createAttribute("id", valString));\n            } catch (DfException | D2fsException e) {\n                throw new D2fsException("Unable to copy value to clipboard.");\n            }\n        }\n        return result;\n    }\n}\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"src/main/smartview/src/actions/clipboard.actions.js - The javascript file with the callback function implementation.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"define([], function () {\n    'use strict';\n    return {\n        copyId: function (options) {\n            var oam_id = options.data.id;\n\n            console.log('copyId called.');\n\n            if (oam_id.indexOf('\xac') !== -1) {\n                oam_id.replace('\xac', ',');\n            }\n            console.log('oam_id = ' + oam_id);\n            let ua = navigator.userAgent.toLowerCase();\n            let isOpera = ua.indexOf('opera') > -1;\n            let isIE = (!isOpera && ua.indexOf('msie') > -1) || (ua.indexOf('trident') > -1);\n            let isEdge = ua.indexOf('windows') > -1 && ua.indexOf('edge') > -1;\n            let isFF = ua.indexOf('firefox') > -1;\n            let isSafari = (ua.indexOf('webkit') > -1) || (ua.indexOf('khtml') > -1) || (ua.indexOf('safari') > -1);\n            let isChrome = ua.indexOf('chrome') > -1;\n            console.log('isOpera', isOpera);\n            console.log('isIE', isIE);\n            console.log('isEdge', isEdge);\n            console.log('isFF', isFF);\n            console.log('isSafari', isSafari);\n            console.log('isChrome', isChrome);\n            if (isIE) {\n                window.clipboardData.setData('Text', oam_id);\n                console.log('Text copied to clipboard');\n            } else if (isEdge) {\n                console.log('edge clipboard.');\n                this.pasteInClipboardHTML5(oam_id);\n            } else {\n                navigator.clipboard.writeText(oam_id).then(function () {\n                    console.log('Text copied to clipboard');\n                }).catch(function (err) {\n\n                    console.error('Could not copy text: ', err);\n                });\n            }\n            console.log('copyId done.');\n        },\n\n        pasteInClipboardHTML5: function (text) {\n            function selectElementText(element) {\n                let range;\n                if (document.selection) {\n                    range = document.body.createTextRange();\n                    range.moveToElementText(element);\n                    range.select();\n                } else if (window.getSelection) {\n                    range = document.createRange();\n                    range.selectNode(element);\n                    window.getSelection().removeAllRanges();\n                    window.getSelection().addRange(range);\n                }\n            }\n\n            let element = document.createElement('div');\n            element.textContent = text;\n            document.body.appendChild(element);\n            selectElementText(element);\n            document.execCommand('copy');\n            element.remove();\n        },\n    };\n})\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"src/main/smartview/src/bundles/d2svomni-bundle.js - Add an entry for the callback action's javascript file. ")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"define('bundles/d2svomni-bundle',[\n    'd2svomni/utils/theme/action.icons',\n    'd2svomni/utils/startup',\n    'd2svomni/actions/clipboard.actions'\n], {});\n")),(0,i.yg)("p",null,"After making these changes, build the D2SVOmni plugin and deploy it on the app server.\nA new menu item CopyId can be seen on the doclist menu toolbar."))}d.isMDXComponent=!0}}]);