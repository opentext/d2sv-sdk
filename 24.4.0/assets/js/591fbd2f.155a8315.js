"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[3234],{5680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>y});var n=a(6540);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(a),f=s,y=c["".concat(o,".").concat(f)]||c[f]||u[f]||r;return a?n.createElement(y,i(i({ref:t},p),{},{components:a})):n.createElement(y,i({ref:t},p))}));function y(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=f;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:s,i[1]=l;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},4227:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=a(8168),s=(a(6540),a(5680));const r={sidebar_position:1.04,sidebar_label:"Java Assistance type support for multi value list",description:"Java based option builder for assisted fields in a dialog"},i="What is Assistance type for Multi value list",l={unversionedId:"general/howto/d2fsdialog/1_04_java_assistance_support_multivalue_list",id:"general/howto/d2fsdialog/1_04_java_assistance_support_multivalue_list",title:"What is Assistance type for Multi value list",description:"Java based option builder for assisted fields in a dialog",source:"@site/articles/general/howto/d2fsdialog/1_04_java_assistance_support_multivalue_list.md",sourceDirName:"general/howto/d2fsdialog",slug:"/general/howto/d2fsdialog/1_04_java_assistance_support_multivalue_list",permalink:"/d2sv-sdk/24.4.0/general/howto/d2fsdialog/1_04_java_assistance_support_multivalue_list",draft:!1,tags:[],version:"current",sidebarPosition:1.04,frontMatter:{sidebar_position:1.04,sidebar_label:"Java Assistance type support for multi value list",description:"Java based option builder for assisted fields in a dialog"},sidebar:"general",previous:{title:"Externalize dialog parameters",permalink:"/d2sv-sdk/24.4.0/general/howto/d2fsdialog/1_03_externalize_dialog_parameters"},next:{title:"Workspace & Assistant",permalink:"/d2sv-sdk/24.4.0/general/ws_assistant/"}},o={},d=[{value:"What are the assistance types supported",id:"what-are-the-assistance-types-supported",level:3},{value:"How to add assistance types for dropdown fields",id:"how-to-add-assistance-types-for-dropdown-fields",level:3},{value:"Example",id:"example",level:4},{value:"When data is fetched for dropdown fields",id:"when-data-is-fetched-for-dropdown-fields",level:3},{value:"Synchronous",id:"synchronous",level:6},{value:"Asynchronous",id:"asynchronous",level:6},{value:"Example",id:"example-1",level:5},{value:"Sample Java class",id:"sample-java-class",level:5},{value:"Example for java assistance with dependencies",id:"example-for-java-assistance-with-dependencies",level:3},{value:"Sample Java classes",id:"sample-java-classes",level:5}],p={toc:d},c="wrapper";function u(e){let{components:t,...a}=e;return(0,s.yg)(c,(0,n.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"what-is-assistance-type-for-multi-value-list"},"What is Assistance type for Multi value list"),(0,s.yg)("p",null,"Assistance type helps to fetch data for a given property page multi value list field."),(0,s.yg)("h3",{id:"what-are-the-assistance-types-supported"},"What are the assistance types supported"),(0,s.yg)("p",null,"Following assistance types are supported as part of multi value list fields:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"DQL"),(0,s.yg)("li",{parentName:"ul"},"Dictonary"),(0,s.yg)("li",{parentName:"ul"},"Java")),(0,s.yg)("h3",{id:"how-to-add-assistance-types-for-dropdown-fields"},"How to add assistance types for dropdown fields"),(0,s.yg)("p",null,"Following attributes can be added to dropdown field to support fetching data."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"assistance_type")," : This attribute specifies what type of assitance this field is refering to. It could be one of ",(0,s.yg)("em",{parentName:"p"},"dql")," (or) ",(0,s.yg)("em",{parentName:"p"},"dictonary")," (or) ",(0,s.yg)("em",{parentName:"p"},"java"),"."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"assistance_{option}")," : This attribute provides the data source details for the given assistance type. If assitance_type is dql, then DQL query will be specified as part of this field. In case of java, we need to specify the Java class that returns the data."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"asynchronous")," : This attribute specifies whether the data need to be fetched when the property dialog is opened (or) when dropdown is selected. if it is ",(0,s.yg)("em",{parentName:"p"},"true"),", then data is fecthed when dropdown is selected by user."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"dependencies")," : This attribute is used when a field values presented using another dependent field. Multiple dependency fields can be added using comma as separator.  "),(0,s.yg)("h4",{id:"example"},"Example"),(0,s.yg)("p",null,"Below example returns available D2 property config pages by using assistance type as DQL."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},'     <combo advancedView_required="true"\n            assistance_dql="select object_name from d2_property_config"\n            assistance_type="dql"\n            condition_required="true"\n            condition_required_edit="true"\n            control="true"\n            id="property_config"\n            label_en="Select view"/>\n')),(0,s.yg)("h3",{id:"when-data-is-fetched-for-dropdown-fields"},"When data is fetched for dropdown fields"),(0,s.yg)("p",null,"As part of custom dialog dropdown list fields, data can be fetched at the time of loading a dialog or when dropdown is selected by user."),(0,s.yg)("h6",{id:"synchronous"},"Synchronous"),(0,s.yg)("p",null,"During property dialog load, respective assistance type will be evaluated and data will be fetched and is available in the dialog."),(0,s.yg)("h6",{id:"asynchronous"},"Asynchronous"),(0,s.yg)("p",null,"Data won't be fetched when the property dialog is loading, rather it will be fetched when dropdown is selected."),(0,s.yg)("h5",{id:"example-1"},"Example"),(0,s.yg)("p",null,"Below example returns ",(0,s.yg)("em",{parentName:"p"},"available assistance types")," by using assistance type as Java."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},'     <combo advancedView_required="true"\n               assistance_java="${package}.dialogs.AvailableAssistanceTypes"\n               assistance_type="java"\n               condition_required="true"\n               condition_required_edit="true"\n               control="true"\n               asynchronous="true"\n               id="assistance_types"\n               label_en="Supported Assistance types for dropdown list field"/>\n')),(0,s.yg)("h5",{id:"sample-java-class"},"Sample Java class"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},'    public class AvailableAssistanceTypes implements IJavaAssistance\n    {\n    @Override\n    public Object getValue(final D2fsContext arg0, final MultiResourceBundle arg1, final Map<String, Object> arg2) \n            throws DfException, D2fsException {\n    \n            final XmlNode result = new XmlNodeImpl();\n    \n            result.appendXmlNode(new XmlOptionEx(1, "DQL", false));\n            result.appendXmlNode(new XmlOptionEx(2, "Dictonary", false));\n            result.appendXmlNode(new XmlOptionEx(3, "Java", false));\n    \n            return result;\n        }\n    }\n')),(0,s.yg)("h3",{id:"example-for-java-assistance-with-dependencies"},"Example for java assistance with dependencies"),(0,s.yg)("p",null,"Below example "),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},'      <combo advancedView_required="true" \n          assistance_java="com.opentext.d2.smartview.d2svdialogs.assistance.CountryAssistance" \n          assistance_type="java" \n          id="country_field"/>\n      \n      <list advancedView_required="true" \n        assistance_java="com.opentext.d2.smartview.d2svdialogs.assistance.StateAssistance" \n        assistance_type="java" \n        asynchronous="true" \n        dependencies="country_field" \n        id="states_field" />\n        \n      <list advancedView_required="true" \n        assistance_java="com.opentext.d2.smartview.d2svdialogs.assistance.StateAssistance" \n        assistance_type="java" \n        asynchronous="true" \n        dependencies="country_field" \n        id="states_field"/>\n\n')),(0,s.yg)("h5",{id:"sample-java-classes"},"Sample Java classes"),(0,s.yg)("p",null,"Country class returning few nations data for multi value field using Java Assistance."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},'    public class CountryAssistance implements IJavaAssistance\n    {\n        @Override\n        public Object getValue(final D2fsContext arg0, final MultiResourceBundle arg1, final Map<String, Object> requestParameters) throws DfException, D2fsException\n        {\n            final XmlNode result = new XmlNodeImpl();\n    \n            result.appendXmlNode(new XmlOptionEx("India", "India", false));\n            result.appendXmlNode(new XmlOptionEx("USA", "USA", false));\n            result.appendXmlNode(new XmlOptionEx("Canada", "Canada", false));\n            return result;\n        }\n    }\n')),(0,s.yg)("p",null,"Fetch states based on the selected country. country_field data is available through requestParameters map in the below class."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},'public class StateAssistance implements IJavaAssistance\n{\n    @Override\n    public Object getValue(final D2fsContext arg0, final MultiResourceBundle arg1, final Map<String, Object> requestParameters) throws DfException, D2fsException\n    {\n        String country = (String) requestParameters.getOrDefault("country_field", "");\n        if (!COUNTRY_STATES.containsKey(country.toLowerCase())) {\n            throw new IllegalArgumentException("Unsupported country: " + country);\n        }\n        \n        final XmlNode result = new XmlNodeImpl();\n        // loop through states and append to XmlNode\n        for (String state: COUNTRY_STATES.getOrDefault(country.toLowerCase(), Collections.emptyList())) {\n            result.appendXmlNode(new XmlOptionEx(state, state, false));\n        }\n        return result;\n    }\n}\n')),(0,s.yg)("p",null,"Fetch cities based on the selected states. Multiple states can be passed and based on that cities are returned."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},'public class CityAssistance implements IJavaAssistance\n{\n    @Override\n    public Object getValue(final D2fsContext arg0, final MultiResourceBundle arg1, final Map<String, Object> requestParameters) throws DfException, D2fsException\n    {\n        String statesField = (String) requestParameters.getOrDefault("states_field", "");\n        // states_field is a multi value field - use separator to parse values\n        String[] states = statesField.split(SEPARATOR_VALUE);\n\n        final XmlNode result = new XmlNodeImpl();\n        for(String state: states) {\n            // loop through states and append to XmlNode\n            for (String city : STATE_CITIES.getOrDefault(state.toLowerCase(), Collections.emptyList())) {\n                result.appendXmlNode(new XmlOptionEx(city, city, false));\n            }\n        }\n        return result;\n    }\n}\n')))}u.isMDXComponent=!0}}]);