"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[3494],{5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>h});var n=a(6540);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=d(a),m=i,h=g["".concat(s,".").concat(m)]||g[m]||p[m]||o;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3514:(e,t,a)=>{a.d(t,{A:()=>f});var n=a(6540),i=a(53),o=a(1754),r=a(5489),l=a(6654),s=a(1312);const d={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function c(e){let{href:t,children:a}=e;return n.createElement(r.A,{href:t,className:(0,i.A)("card padding--lg",d.cardContainer)},a)}function g(e){let{href:t,icon:a,title:o,description:r}=e;return n.createElement(c,{href:t},n.createElement("h2",{className:(0,i.A)("text--truncate",d.cardTitle),title:o},a," ",o),r&&n.createElement("p",{className:(0,i.A)("text--truncate",d.cardDescription),title:r},r))}function p(e){let{item:t}=e;const a=(0,o._o)(t);return a?n.createElement(g,{href:a,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,s.T)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function m(e){let{item:t}=e;const a=(0,l.A)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",i=(0,o.cC)(t.docId??void 0);return n.createElement(g,{href:t.href,icon:a,title:t.label,description:t.description??i?.description})}function h(e){let{item:t}=e;switch(t.type){case"link":return n.createElement(m,{item:t});case"category":return n.createElement(p,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function u(e){let{className:t}=e;const a=(0,o.$S)();return n.createElement(f,{items:a.items,className:t})}function f(e){const{items:t,className:a}=e;if(!t)return n.createElement(u,e);const r=(0,o.d1)(t);return n.createElement("section",{className:(0,i.A)("row",a)},r.map(((e,t)=>n.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},n.createElement(h,{item:e})))))}},4789:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(8168),i=(a(6540),a(5680)),o=a(3514);const r={description:"Implementing custom business flow with minimum coding"},l="D2FS Dialog",s={unversionedId:"general/howto/d2fsdialog/index",id:"general/howto/d2fsdialog/index",title:"D2FS Dialog",description:"Implementing custom business flow with minimum coding",source:"@site/articles/general/howto/d2fsdialog/index.md",sourceDirName:"general/howto/d2fsdialog",slug:"/general/howto/d2fsdialog/",permalink:"/d2sv-sdk/24.4.0/general/howto/d2fsdialog/",draft:!1,tags:[],version:"current",frontMatter:{description:"Implementing custom business flow with minimum coding"},sidebar:"general",previous:{title:"Licensing implementation",permalink:"/d2sv-sdk/24.4.0/general/howto/1_11_use_licensing"},next:{title:"Set form mode for D2FS dialog",permalink:"/d2sv-sdk/24.4.0/general/howto/d2fsdialog/1_01_assign_form_mode_for_chained_dialogs"}},d={},c=[{value:"What is it?",id:"what-is-it",level:2},{value:"Components of D2FS dialog",id:"components-of-d2fs-dialog",level:2},{value:"Server side",id:"server-side",level:3},{value:"Client side",id:"client-side",level:3},{value:"What and when to customize?",id:"what-and-when-to-customize",level:2},{value:"Basics of implementing a business flow",id:"basics-of-implementing-a-business-flow",level:2},{value:"Passing data from one dialog to another",id:"passing-data-from-one-dialog-to-another",level:3},{value:"Entry point of a D2FS dialog",id:"entry-point-of-a-d2fs-dialog",level:2},{value:"This all sounds interesting, how do I create one?",id:"this-all-sounds-interesting-how-do-i-create-one",level:2},{value:"Detailed customization topics",id:"detailed-customization-topics",level:2}],g={toc:c},p="wrapper";function m(e){let{components:t,...a}=e;return(0,i.yg)(p,(0,n.A)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"d2fs-dialog"},"D2FS Dialog"),(0,i.yg)("h2",{id:"what-is-it"},"What is it?"),(0,i.yg)("p",null,"D2FS dialog is a core component of D2 API. It is a declarative tool to design UI interaction and business logic code\nto create, update, delete data in the system with the help of other D2 and/or DFC APIs. D2 runtime itself heavily\nrelies on many out-of-the-box(OOTB) D2FS dialogs to implement many of its functionalities, e.g., Property page, Lifecycle, Workflow etc."),(0,i.yg)("p",null,"D2FS dialog mostly starts in the context of an existing object in the system, drives capturing\nvarious (un)assisted input from end-user based on the context, then finally alters the contextual object itself or its related objects by creating\nor modifying data. This contextual, data-driven nature of a single functional unit that already has much of its behavior\npre-defined, makes it a great tool for customizations."),(0,i.yg)("p",null,"D2FS dialog can prove to be a handy tool in custom business flow implementations that are heavily end-user input oriented."),(0,i.yg)("h2",{id:"components-of-d2fs-dialog"},"Components of D2FS dialog"),(0,i.yg)("p",null,"Each D2FS dialog consists of server-side & client-side components that work together to create its UI, appearance and behavior."),(0,i.yg)("h3",{id:"server-side"},"Server side"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:"center"},"Component name"),(0,i.yg)("th",{parentName:"tr",align:"center"},"Description"),(0,i.yg)("th",{parentName:"tr",align:"center"},"Is customizable?"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},"Dialog structure XML"),(0,i.yg)("td",{parentName:"tr",align:"center"},"An XML file defining the overall structure, layout of the dialog's UI and its constituent elements"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Yes")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},"Dialog labels"),(0,i.yg)("td",{parentName:"tr",align:"center"},"A Java properties file containing the display labels associated with the dialog"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Yes")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},"Dialog Java class"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Java class responsible for building, validating and/or running business specific logic for the dialog"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Yes")))),(0,i.yg)("h3",{id:"client-side"},"Client side"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:"center"},"Component name"),(0,i.yg)("th",{parentName:"tr",align:"center"},"Description"),(0,i.yg)("th",{parentName:"tr",align:"center"},"Is customizable?"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},"Dialog state"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Holder for dialog's state data and overall context. It also acts as the interface between state methods and actions for the dialog. It is created as soon as a dialog execution stars on the UI and lives on until the dialog closes, keeping a history of all the state changes that happens in between."),(0,i.yg)("td",{parentName:"tr",align:"center"},"No")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"td",href:"/api/d2/controls/dialogs/generic/dialog.state.method"},"Dialog state method")),(0,i.yg)("td",{parentName:"tr",align:"center"},"Defines the means for a dialog to navigate to its next possible presentation and data state from current presentation and data state"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Yes")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"td",href:"/api/d2/controls/dialogs/generic/dialog.schema.builders"},"Schema builder")),(0,i.yg)("td",{parentName:"tr",align:"center"},"Data transformer that converts the dialog definition from server-side format into its client-side format(a.k.a schema) which is interpreted by the content view"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Yes")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"td",href:"/api/d2/controls/dialogs/generic/dialog.content.view"},"Content view")),(0,i.yg)("td",{parentName:"tr",align:"center"},"UI component responsible for creating the interactive visual rendition of a dialog schema"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Yes")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},(0,i.yg)("a",{parentName:"td",href:"/api/d2/controls/dialogs/generic/dialog.action"},"Action")),(0,i.yg)("td",{parentName:"tr",align:"center"},"Defines the behavior of buttons attached to a dialog"),(0,i.yg)("td",{parentName:"tr",align:"center"},"Yes")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:"center"},"UI container"),(0,i.yg)("td",{parentName:"tr",align:"center"},"The client-side component that brings all other dialog related client-side components together and finally renders the dialog's UI enclosed inside a modal popup/side-panel."),(0,i.yg)("td",{parentName:"tr",align:"center"},"No")))),(0,i.yg)("h2",{id:"what-and-when-to-customize"},"What and when to customize?"),(0,i.yg)("p",null,"The server-side components play the key role in defining a dialog i.e., for every new dialog, a new set of server-side component has to be created. Whereas, a default set of client-side components can automatically\nbind to any such server-side definitions in order to display it in UI and provide its behavior. It means, the client-side components needs customization only when\ntheir default capabilities fall short for a certain dialog's display and/or expected behavior. Also see ",(0,i.yg)("a",{parentName:"p",href:"#detailed-customization-topics"},"Detailed customization topics"),"."),(0,i.yg)("h2",{id:"basics-of-implementing-a-business-flow"},"Basics of implementing a business flow"),(0,i.yg)("p",null,"To implement a business flow using dialogs, first thing we have to know is the total number of distinct (in terms of UI appearance) steps in the flow.\nFor each step identified, we have to define a new dialog. Once the server-side components for each of the dialogs have been defined,\nthe dialogs have to be linked with each other as per required business logic. "),(0,i.yg)("p",null,"To link, ",(0,i.yg)("inlineCode",{parentName:"p"},"DialogB")," to the positive sense of\nnavigation from ",(0,i.yg)("inlineCode",{parentName:"p"},"DialogA")," and to link ",(0,i.yg)("inlineCode",{parentName:"p"},"DialogC")," to the negative sense of navigation from ",(0,i.yg)("inlineCode",{parentName:"p"},"DialogA"),", the ",(0,i.yg)("inlineCode",{parentName:"p"},"DialogA.java")," has\nto be modified w.r.t ",(0,i.yg)("inlineCode",{parentName:"p"},"validDialog")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"cancelDialog")," methods to make them look like -"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'class DialogA extends AbstractDialog implements ID2Dialog {\n    @Override\n    public XmlNode validDialog(D2fsContext context) throws Exception {\n        XmlNode result = super.validDialog(context);\n        result.setAttribute("nextDialogName", "DialogB");\n        result.setAttribute("attr1", "value1"); // Attributes set on the return value like this line, will be avaialble to DialogB as input data when that is being built\n        return result;\n    }\n    \n    @Override\n    public XmlNode cancelDialog(D2fsContext context) throws Exception {\n        XmlNode result = super.cancelDialog(context);\n        result.setAttribute("nextDialogName", "DialogC");\n        result.setAttribute("attr2", "value2"); // Attributes set on the return value like this line, will be avaialble to DialogC as input data when that is being built\n        return result;\n    }\n}\n')),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"As an alternative to setting ",(0,i.yg)("inlineCode",{parentName:"p"},"nextDialogName")," attribute from ",(0,i.yg)("inlineCode",{parentName:"p"},"validDialog()")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"cancelDialog()")," of a specific dialog definition to achieve linking, a single ",(0,i.yg)("inlineCode",{parentName:"p"},"D2DialogService")," override\ncan be used to achieve the same. But, as the override will be called for all OOTB as well as plugin-defined dialogs, so maintaining the condition logic can\neasily become overwhelming, making it a downside of that approach.")),(0,i.yg)("h3",{id:"passing-data-from-one-dialog-to-another"},"Passing data from one dialog to another"),(0,i.yg)("p",null,"When two dialogs are linked in a flow, the default state method implementation automatically passes the data collected in a dialog to its next\nimmediate dialog; next in the sense of both positive and negative side of the navigation. Most of the time this behavior suffices the data passing\nrequirement between two dialogs. However, if a synthesized piece of data i.e., data not captured as part of dialog, has to passed to\nthe next dialog, then we have two options to do that -"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"If the synthesized data exists on the server-side, then the data can be set as additional attribute to the return value of ",(0,i.yg)("inlineCode",{parentName:"li"},"validDialog()")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"cancelDialog()"),", as shown in the above code snippet."),(0,i.yg)("li",{parentName:"ol"},"If the synthesized data exists on the client-side, then the data can be injected upon the collected form data through a customized client-side action. See ",(0,i.yg)("a",{parentName:"li",href:"/api/d2/controls/dialogs/generic/dialog.action"},"DialogAction"),". ")),(0,i.yg)("h2",{id:"entry-point-of-a-d2fs-dialog"},"Entry point of a D2FS dialog"),(0,i.yg)("p",null,'Once a D2FS dialog has been defined, it can be invoked from the Smartview UI through a menu configuration.\nIn D2-Config, we can add a new menu item under any of the toolbars of "Menu Smart View" type of configurations. The ',(0,i.yg)("inlineCode",{parentName:"p"},"Action")," field\nfor the menu configuration should be set to ",(0,i.yg)("inlineCode",{parentName:"p"},"Show dialog")," and the ",(0,i.yg)("inlineCode",{parentName:"p"},"Dialog")," field should be set to the name of the dialog we want to invoke."),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"A similar menu configuration can be automatically created by appropriately answering the relevant question asked by ",(0,i.yg)("a",{parentName:"p",href:"../ws_assistant"},"Workspace assistant")," while creating a dialog boilerplate using it.")),(0,i.yg)("h2",{id:"this-all-sounds-interesting-how-do-i-create-one"},"This all sounds interesting, how do I create one?"),(0,i.yg)("p",null,"A bare-minimum yet functional server-side boilerplate can be easily created through the use of ",(0,i.yg)("a",{parentName:"p",href:"../ws_assistant"},"Workspace assistant"),".\nAt first, create a plugin project in your SDK workspace, if there is none, and then use the ",(0,i.yg)("a",{parentName:"p",href:"../ws_assistant/2_12_add.d2fs.dialog"},"Add D2FS dialog to a plugin")," option to\ncreate a dialog boilerplate."),(0,i.yg)("h2",{id:"detailed-customization-topics"},"Detailed customization topics"),(0,i.yg)(o.A,{mdxType:"DocCardList"}))}m.isMDXComponent=!0}}]);