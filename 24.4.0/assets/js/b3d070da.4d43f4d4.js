"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[6],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var o=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=c(t),u=r,m=g["".concat(s,".").concat(u)]||g[u]||p[u]||i;return t?o.createElement(m,a(a({ref:n},d),{},{components:t})):o.createElement(m,a({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8170:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=t(8168),r=(t(6540),t(5680));const i={},a=void 0,l={unversionedId:"api/d2/controls/dialogs/generic/dialog.content.views",id:"api/d2/controls/dialogs/generic/dialog.content.views",title:"dialog.content.views",description:"DialogContentViews : d2/sdk/controls/dialogs/generic/dialog.content.views",source:"@site/articles/api/d2/controls/dialogs/generic/dialog.content.views.md",sourceDirName:"api/d2/controls/dialogs/generic",slug:"/api/d2/controls/dialogs/generic/dialog.content.views",permalink:"/d2sv-sdk/24.4.0/api/d2/controls/dialogs/generic/dialog.content.views",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"dialog.content.view",permalink:"/d2sv-sdk/24.4.0/api/d2/controls/dialogs/generic/dialog.content.view"},next:{title:"dialog.schema.builders",permalink:"/d2sv-sdk/24.4.0/api/d2/controls/dialogs/generic/dialog.schema.builders"}},s={},c=[{value:"DialogContentViews : <code>d2/sdk/controls/dialogs/generic/dialog.content.views</code>",id:"dialogcontentviews--d2sdkcontrolsdialogsgenericdialogcontentviews",level:2}],d={toc:c},g="wrapper";function p(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,o.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("a",{name:"module_DialogContentViews"}),(0,r.yg)("h2",{id:"dialogcontentviews--d2sdkcontrolsdialogsgenericdialogcontentviews"},"DialogContentViews : ",(0,r.yg)("code",null,"d2/sdk/controls/dialogs/generic/dialog.content.views")),(0,r.yg)("p",null,"Collection of content view for D2SV generic dialogs. Each screen of the D2SV generic dialog offers the content area for the end user to\ninteract with in order to view and enter the data for the dialog. Items from this collection act as handlers for resolving the view\nin D2SV generic dialog such that views are loosely attached to the generic dialog's view content after evaluating the view's matching conditions."),(0,r.yg)("p",null,"By default, D2SV runtime registers default form content view for dynamic dialog. New dialog content view could\nbe registered by means of extensions."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Extends"),": ",(0,r.yg)("a",{parentName:"p",href:"https://backbonejs.org/#Collection"},(0,r.yg)("code",null,"Backbone.Collection")),(0,r.yg)("br",{parentName:"p"}),"\n",(0,r.yg)("strong",{parentName:"p"},"See"),": ",(0,r.yg)("a",{parentName:"p",href:"./dialog.content.views"},"DialogContentView"),(0,r.yg)("br",{parentName:"p"}),"\n",(0,r.yg)("strong",{parentName:"p"},"Example")," ",(0,r.yg)("em",{parentName:"p"},"(To register new dialog content view, in extensions.json)"),"  "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'{\n "d2/sdk/controls/dialogs/generic/dialog.content.views": {\n   "extensions": {\n     "mybundle": [\n       "mybundle/extensions/generic.dialog.content.view"\n     ]\n   }\n }\n}\n')),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example")," ",(0,r.yg)("em",{parentName:"p"},"(whereas generic.dialog.content.view.js could be defined as)"),"  "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'import DialogContentViewA from \'mybundle/generic.dialog/dialog.content.view.a\';\nimport DialogContentViewB from \'mybundle/generic.dialog/dialog.content.view.b\';\n\nconst dialogContentViewRules = [\n  {equals: {"formName": "FormA"}, viewClass: DialogContentViewA},\n  {equals: {"formName": "FormB"}, viewClass: DialogContentViewB}\n];\n\nexport default dialogContentViewRules;\n')))}p.isMDXComponent=!0}}]);