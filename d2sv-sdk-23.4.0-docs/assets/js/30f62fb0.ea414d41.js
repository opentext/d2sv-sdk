"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[1134],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>h});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=a.createContext({}),d=function(e){var t=a.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(o),g=n,h=p["".concat(l,".").concat(g)]||p[g]||m[g]||r;return o?a.createElement(h,s(s({ref:t},c),{},{components:o})):a.createElement(h,s({ref:t},c))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,s=new Array(r);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:n,s[1]=i;for(var d=2;d<r;d++)s[d]=o[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,o)}g.displayName="MDXCreateElement"},4723:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=o(7462),n=(o(7294),o(3905));const r={},s=void 0,i={unversionedId:"api/d2/controls/dialogs/generic/dialog.state.methods",id:"api/d2/controls/dialogs/generic/dialog.state.methods",title:"dialog.state.methods",description:"DialogStateMethods : d2/sdk/controls/dialogs/generic/dialog.state.methods",source:"@site/articles/api/d2/controls/dialogs/generic/dialog.state.methods.md",sourceDirName:"api/d2/controls/dialogs/generic",slug:"/api/d2/controls/dialogs/generic/dialog.state.methods",permalink:"/api/d2/controls/dialogs/generic/dialog.state.methods",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"dialog.state.method",permalink:"/api/d2/controls/dialogs/generic/dialog.state.method"},next:{title:"simple.dialog",permalink:"/api/d2/controls/dialogs/simple.dialog"}},l={},d=[{value:"DialogStateMethods : <code>d2/sdk/controls/dialogs/generic/dialog.state.methods</code>",id:"dialogstatemethods--d2sdkcontrolsdialogsgenericdialogstatemethods",level:2}],c={toc:d},p="wrapper";function m(e){let{components:t,...o}=e;return(0,n.kt)(p,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("a",{name:"module_DialogStateMethods"}),(0,n.kt)("h2",{id:"dialogstatemethods--d2sdkcontrolsdialogsgenericdialogstatemethods"},"DialogStateMethods : ",(0,n.kt)("code",null,"d2/sdk/controls/dialogs/generic/dialog.state.methods")),(0,n.kt)("p",null,'In D2SV, a Generic Dialog consists of an arbitrary number of UI screens. A "Dialog State" represents the metadata associated with each of such screens.\nA dialog state "Method" dynamically defines a transition path between two screens in a loosely coupled\nmanner, by being able to generate metadata for the next possible state, from a given dialog state. In other words, a "Method" could be applied on\nthe current state of a dialog to generate metadata for the next state.'),(0,n.kt)("p",null,'DialogStateMethods holds all the registered state method implementations. New "Method" implementations could be registered with this collection\nby means of extension, such that each extension associates a method implementation with a set of qualifying conditions to limit the scope\nof applying that particular method implementation.'),(0,n.kt)("p",null,'When a "Method" is being applied on a dialog state, the "Method name" along with several other current state related parameters are used\nto find matches against all the qualifying conditions accross all registered method implementations. Method implementations, found after this lookup, are\nexecuted in order to derive the next state of the dialog.'),(0,n.kt)("p",null,'By default, D2SV defines three method names "GET", "VALIDATE" and "CANCEL" to align itself with ',(0,n.kt)("inlineCode",{parentName:"p"},"getDialog()"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"validDialog()")," & ",(0,n.kt)("inlineCode",{parentName:"p"},"cancelDialog()"),"\nstate transitions supported by D2FS Dialog Service. However, based on how dialog state transition is requested, registered state method implemenations\ncould react to any other method name to respond with a possible next state data."),(0,n.kt)("p",null,"See also ",(0,n.kt)("a",{parentName:"p",href:"./dialog.state.method"},"DialogStateMethod")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Extends"),": ",(0,n.kt)("a",{parentName:"p",href:"https://backbonejs.org/#Collection"},(0,n.kt)("code",null,"Backbone.Collection")),(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("strong",{parentName:"p"},"Example")," ",(0,n.kt)("em",{parentName:"p"},"(To register a new method implementation, in extension.json)"),"  "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'\n{\n "d2/sdk/controls/dialogs/generic/dialog.state.methods": {\n  "extensions": {\n    "mybundle": [\n      "mybundle/extensions/my.state.methods"\n    ]\n  }\n }\n}\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")," ",(0,n.kt)("em",{parentName:"p"},"(Whereas my.state.methods.js could be defined as)"),"  "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import AStateMethod from 'mybundle/dialogs/states/state.method.a';\nimport BStateMethod from 'mybundle/dialogs/states/state.method.b';\nimport CStateMethod from 'mybundle/dialogs/states/state.method.c';\n// N number of state methods could by bound by a single extension.\n// AStateMethod, BStateMethod, CStateMethod all are subclasses of DialogStateMethod i.e. d2/sdk/controls/dialogs/generic/dialog.state.method module.\n\nexport default [\n {equals:{method: 'GET'}, sequence: 100, methodClass: AStateMethod}, //Method will be applied only for 'GET'\n {includes:{method: ['GET', 'VALIDATE', 'CANCEL']}, sequence: 101, methodClass: BStateMethod}, //Method will be applied for all of 'GET', 'VALIDATE', 'CANCEL'. however for 'GET' case it will be executed after AStateMethod\n {equals:{method: 'SOME_NAME'}, sequence: 100, methodClass: CStateMethod} //Method will be applied only for non-default method name 'SOME_NAME'\n];\n")))}m.isMDXComponent=!0}}]);