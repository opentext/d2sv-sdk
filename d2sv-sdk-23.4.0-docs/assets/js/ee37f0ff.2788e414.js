"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[7862],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>w});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function d(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):d(d({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),m=p(a),c=l,w=m["".concat(i,".").concat(c)]||m[c]||u[c]||o;return a?n.createElement(w,d(d({ref:t},s),{},{components:a})):n.createElement(w,d({ref:t},s))}));function w(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=a.length,d=new Array(o);d[0]=c;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r[m]="string"==typeof e?e:l,d[1]=r;for(var p=2;p<o;p++)d[p]=a[p];return n.createElement.apply(null,d)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},692:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const o={},d=void 0,r={unversionedId:"api/d2/widgets/metadata.panel/metadata.panel.view",id:"api/d2/widgets/metadata.panel/metadata.panel.view",title:"metadata.panel.view",description:"MetadataPanelView : d2/sdk/widgets/metadata.panel/metadata.panel.view",source:"@site/articles/api/d2/widgets/metadata.panel/metadata.panel.view.md",sourceDirName:"api/d2/widgets/metadata.panel",slug:"/api/d2/widgets/metadata.panel/metadata.panel.view",permalink:"/api/d2/widgets/metadata.panel/metadata.panel.view",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"list.tile.view",permalink:"/api/d2/widgets/list.tile/list.tile.view"},next:{title:"metadata.panel.views",permalink:"/api/d2/widgets/metadata.panel/metadata.panel.views"}},i={},p=[{value:"MetadataPanelView : <code>d2/sdk/widgets/metadata.panel/metadata.panel.view</code>",id:"metadatapanelview--d2sdkwidgetsmetadatapanelmetadatapanelview",level:2},{value:"metadataPanelView.options : <code>Object</code>",id:"metadatapanelviewoptions--object",level:3},{value:"metadataPanelView.model : <code>NodeModel</code>",id:"metadatapanelviewmodel--nodemodel",level:3},{value:"MetadataPanelView.enabled(options) \u21d2 <code>boolean</code>",id:"metadatapanelviewenabledoptions--boolean",level:3}],s={toc:p},m="wrapper";function u(e){let{components:t,...a}=e;return(0,l.kt)(m,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("a",{name:"module_MetadataPanelView"}),(0,l.kt)("h2",{id:"metadatapanelview--d2sdkwidgetsmetadatapanelmetadatapanelview"},"MetadataPanelView : ",(0,l.kt)("code",null,"d2/sdk/widgets/metadata.panel/metadata.panel.view")),(0,l.kt)("p",null,"Interface for all custom metadata views.\nThis is an extension of Marionette Layout View"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Extends"),": ",(0,l.kt)("a",{parentName:"p",href:"https://marionettejs.com/docs/v2.4.7/marionette.layoutview.html"},(0,l.kt)("code",null,"Marionette.LayoutView")),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Example")," ",(0,l.kt)("em",{parentName:"p"},"(A new metadata view metadata.helloworld.view.js could be defined as)"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"define([\n  'd2/sdk/widgets/metadata.panel/metadata.panel.view'\n], function (MetadataPanelView) {\n  'use strict';\n\n  var helloworldViewTemplate = '<script type=\"text/html\">' +\n      '<h3 style=\"\\n' +\n      '    margin-top: 48px;\\n' +\n      '    padding: 16px;\\n' +\n      '    font-size: 24px;\\n' +\n      '    color: red;\\n' +\n      '\">Hello World !</h3>' +\n      '<\/script>';\n\n  var MetadataHelloworldView = MetadataPanelView.extend({\n    template: helloworldViewTemplate\n  }, {\n    enabled: function () {\n      // This metadata view will be shown or hidded based on whether\n      //       the enabled function returns true or false\n      return true;\n    }\n  });\n\n  return MetadataHelloworldView;\n});\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," ",(0,l.kt)("em",{parentName:"p"},"(Suppose we do not want to show this metadata view for task, workflow step, repository, folders and cabinets, we can write a simple equality check for node type using ",(0,l.kt)("a",{parentName:"em",href:"../../utils/constants"},"constants")," utils from sdk)"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"   enabled: function (options) {\n       var nodeType = options.node && options.node.get('type');\n\n       if (nodeType === constants.Types.TASK ||\n           nodeType === constants.Types.WORKFLOW_STEP ||\n           nodeType === constants.Types.REPOSITORY ||\n           nodeType === constants.Types.FOLDER ||\n           nodeType === constants.Types.CABINET) {\n           return false;\n       }\n\n       return true;\n   }\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," ",(0,l.kt)("em",{parentName:"p"},"(To register this metadata view with metadata panel views array, add the entry in extension.json as)"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "d2/sdk/widgets/metadata.panel/metadata.panel.views": {\n     "extensions": {\n       "mybundle": [\n         "mybundle/extensions/metadata.panel.views"\n       ]\n     }\n   }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," ",(0,l.kt)("em",{parentName:"p"},"(The metadata.panel.views.js is defined as)"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"define([\n   'mybundle/widgets/metadata/panels/helloworld/metadata.helloworld.view'\n], function(MetadataHelloworldView){\n   'use strict';\n\n   // Array of metadata views added to the plugin\n   return [\n\n     // Each metadata view entry should have a name, title to be shown for the dropdown option\n     //     and content view to be shown on metadata panel when this view is selected\n     {\n            name: 'helloworld', // The metadata view name, it has to be a unique string\n            title: 'Hello World',\n            contentView: MetadataHelloworldView\n     }\n\n     // Additional metadata views can also be registered in this array\n   ];\n});\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module_MetadataPanelView"},"MetadataPanelView")," : ",(0,l.kt)("code",null,"d2/sdk/widgets/metadata.panel/metadata.panel.view"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"instance"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module_MetadataPanelView+options"},".options")," : ",(0,l.kt)("code",null,"Object")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module_MetadataPanelView+model"},".model")," : ",(0,l.kt)("code",null,"NodeModel")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"static"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module_MetadataPanelView.enabled"},".enabled([options])")," \u21d2 ",(0,l.kt)("code",null,"boolean"))))))),(0,l.kt)("a",{name:"module_MetadataPanelView+options"}),(0,l.kt)("h3",{id:"metadatapanelviewoptions--object"},"metadataPanelView.options : ",(0,l.kt)("code",null,"Object")),(0,l.kt)("p",null,"Holder of parameters passed during metadata view construction."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": instance property of ",(0,l.kt)("a",{parentName:"p",href:"#module_MetadataPanelView"},(0,l.kt)("code",null,"MetadataPanelView")),"  "),(0,l.kt)("a",{name:"module_MetadataPanelView+model"}),(0,l.kt)("h3",{id:"metadatapanelviewmodel--nodemodel"},"metadataPanelView.model : ",(0,l.kt)("code",null,"NodeModel")),(0,l.kt)("p",null,"Selected documentum object reference. It holds information like object id, name, type etc."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": instance property of ",(0,l.kt)("a",{parentName:"p",href:"#module_MetadataPanelView"},(0,l.kt)("code",null,"MetadataPanelView")),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"See"),": ",(0,l.kt)("a",{parentName:"p",href:"../../models/node.model"},"NodeModel"),"  "),(0,l.kt)("a",{name:"module_MetadataPanelView.enabled"}),(0,l.kt)("h3",{id:"metadatapanelviewenabledoptions--boolean"},"MetadataPanelView.enabled(","[options]",") \u21d2 ",(0,l.kt)("code",null,"boolean")),(0,l.kt)("p",null,"Decides whether to show or hide dropdown option for this metadata view based on the return value(true or false)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": static method of ",(0,l.kt)("a",{parentName:"p",href:"#module_MetadataPanelView"},(0,l.kt)("code",null,"MetadataPanelView")),"  "),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Param"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"[options]"),(0,l.kt)("td",null,(0,l.kt)("code",null,"Object")),(0,l.kt)("td",null,(0,l.kt)("p",null,"The options object will have the selected documentum object and context details. The options.node will have the selected ",(0,l.kt)("a",{href:"../../models/node.model"},"documentum object")," reference and it contains the object information like object id, name, type etc. Conditions can be added based on these attributes to return true/false (show/hide the dropdown option for the selected documentum object)."))),"  ")))}u.isMDXComponent=!0}}]);