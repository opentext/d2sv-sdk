"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[96],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>w});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var r=n.createContext({}),d=function(e){var t=n.useContext(r),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(r.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,s=e.originalType,r=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),k=d(a),c=l,w=k["".concat(r,".").concat(c)]||k[c]||u[c]||s;return a?n.createElement(w,i(i({ref:t},p),{},{components:a})):n.createElement(w,i({ref:t},p))}));function w(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var s=a.length,i=new Array(s);i[0]=c;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o[k]="string"==typeof e?e:l,i[1]=o;for(var d=2;d<s;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6852:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=a(7462),l=(a(7294),a(3905));const s={},i=void 0,o={unversionedId:"api/d2/widgets/task.details.panel/task.details.panel.view",id:"api/d2/widgets/task.details.panel/task.details.panel.view",title:"task.details.panel.view",description:"TaskDetailsPanelView : d2/sdk/widgets/task.details.panel/task.details.panel.view",source:"@site/articles/api/d2/widgets/task.details.panel/task.details.panel.view.md",sourceDirName:"api/d2/widgets/task.details.panel",slug:"/api/d2/widgets/task.details.panel/task.details.panel.view",permalink:"/api/d2/widgets/task.details.panel/task.details.panel.view",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"shortcut.tile.behaviors",permalink:"/api/d2/widgets/shortcut.tile/shortcut.tile.behaviors"},next:{title:"task.details.panel.views",permalink:"/api/d2/widgets/task.details.panel/task.details.panel.views"}},r={},d=[{value:"TaskDetailsPanelView : <code>d2/sdk/widgets/task.details.panel/task.details.panel.view</code>",id:"taskdetailspanelview--d2sdkwidgetstaskdetailspaneltaskdetailspanelview",level:2},{value:"taskDetailsPanelView.options : <code>Object</code>",id:"taskdetailspanelviewoptions--object",level:3},{value:"taskDetailsPanelView.model : <code>NodeModel</code>",id:"taskdetailspanelviewmodel--nodemodel",level:3},{value:"TaskDetailsPanelView.enabled(options) \u21d2 <code>boolean</code>",id:"taskdetailspanelviewenabledoptions--boolean",level:3}],p={toc:d},k="wrapper";function u(e){let{components:t,...a}=e;return(0,l.kt)(k,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("a",{name:"module_TaskDetailsPanelView"}),(0,l.kt)("h2",{id:"taskdetailspanelview--d2sdkwidgetstaskdetailspaneltaskdetailspanelview"},"TaskDetailsPanelView : ",(0,l.kt)("code",null,"d2/sdk/widgets/task.details.panel/task.details.panel.view")),(0,l.kt)("p",null,"Interface for all custom task details views.\nThis is an extension of Marionette Layout View"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Extends"),": ",(0,l.kt)("a",{parentName:"p",href:"https://marionettejs.com/docs/v2.4.7/marionette.layoutview.html"},(0,l.kt)("code",null,"Marionette.LayoutView")),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Example")," ",(0,l.kt)("em",{parentName:"p"},"(A new task details view task.helloworld.view.js could be defined as)"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"define([\n  'd2/sdk/widgets/task.details.panel/task.details.panel.view'\n], function (TaskDetailsPanelViews) {\n  'use strict';\n\n  var helloworldViewTemplate = '<script type=\"text/html\">' +\n      '<h3 style=\"\\n' +\n      '    padding: 16px;\\n' +\n      '    font-size: 24px;\\n' +\n      '    color: red;\\n' +\n      '\">Hello World !</h3>' +\n      '<\/script>';\n\n  var TaskHelloworldView = TaskDetailsPanelViews.extend({\n    template: helloworldViewTemplate\n  }, {\n    enabled: function () {\n      // This task details view will be shown or hidded based on whether\n      //       the enabled function returns true or false\n      return true;\n    }\n  });\n\n  return TaskHelloworldView;\n});\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," ",(0,l.kt)("em",{parentName:"p"},"(Suppose we want to show this task details view for only those task where assignee is dmadmin, we can write a simple equality check for node","'","s type and assignee attributes and using ",(0,l.kt)("a",{parentName:"em",href:"../../utils/constants"},"constants")," utils from sdk)"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"   enabled: function (options) {\n       var nodeType = options.node.get('type'),\n           assignee = options.node && options.node.get('assignee');\n\n       if (nodeType === constant.Types.TASK &&\n           assignee === 'dmadmin') {\n           return true;\n       }\n\n       return false;\n   }\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," ",(0,l.kt)("em",{parentName:"p"},"(To register this task details view with task details panel views array, add the entry in extension.json as)"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "d2/sdk/widgets/task.details.panel/task.details.panel.views": {\n     "extensions": {\n       "mybundle": [\n         "mybundle/extensions/task.details.panel.views"\n       ]\n     }\n   }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")," ",(0,l.kt)("em",{parentName:"p"},"(The task.details.panel.views.js is defined as)"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"define([\n   'mybundle/widgets/task.details/panels/helloworld/task.helloworld.view'\n], function(TaskHelloworldView){\n   'use strict';\n\n   // Array of task details views added to the plugin\n   return [\n\n     // Each task details view entry should have a name, title to be shown for the tab\n     //     and the content view to be shown on the task details panel when this tab is selected\n     {\n            name: 'helloworld', // The task details tab name, it has to be a unique string\n            title: 'Hello World',\n            contentView: TaskHelloworldView\n     }\n\n     // Additional task details views can also be registered in this array\n   ];\n});\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module_TaskDetailsPanelView"},"TaskDetailsPanelView")," : ",(0,l.kt)("code",null,"d2/sdk/widgets/task.details.panel/task.details.panel.view"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"instance"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module_TaskDetailsPanelView+options"},".options")," : ",(0,l.kt)("code",null,"Object")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module_TaskDetailsPanelView+model"},".model")," : ",(0,l.kt)("code",null,"NodeModel")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"static"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module_TaskDetailsPanelView.enabled"},".enabled([options])")," \u21d2 ",(0,l.kt)("code",null,"boolean"))))))),(0,l.kt)("a",{name:"module_TaskDetailsPanelView+options"}),(0,l.kt)("h3",{id:"taskdetailspanelviewoptions--object"},"taskDetailsPanelView.options : ",(0,l.kt)("code",null,"Object")),(0,l.kt)("p",null,"Holder of parameters passed during task details view construction."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": instance property of ",(0,l.kt)("a",{parentName:"p",href:"#module_TaskDetailsPanelView"},(0,l.kt)("code",null,"TaskDetailsPanelView")),"  "),(0,l.kt)("a",{name:"module_TaskDetailsPanelView+model"}),(0,l.kt)("h3",{id:"taskdetailspanelviewmodel--nodemodel"},"taskDetailsPanelView.model : ",(0,l.kt)("code",null,"NodeModel")),(0,l.kt)("p",null,"Selected task/ workflow reference. It holds information like task/ workflow id, name, type etc."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": instance property of ",(0,l.kt)("a",{parentName:"p",href:"#module_TaskDetailsPanelView"},(0,l.kt)("code",null,"TaskDetailsPanelView")),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"See"),": ",(0,l.kt)("a",{parentName:"p",href:"../../models/node.model"},"NodeModel"),"  "),(0,l.kt)("a",{name:"module_TaskDetailsPanelView.enabled"}),(0,l.kt)("h3",{id:"taskdetailspanelviewenabledoptions--boolean"},"TaskDetailsPanelView.enabled(","[options]",") \u21d2 ",(0,l.kt)("code",null,"boolean")),(0,l.kt)("p",null,"Decides whether to show or hide tab for this task details view based on the return value(true or false)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Kind"),": static method of ",(0,l.kt)("a",{parentName:"p",href:"#module_TaskDetailsPanelView"},(0,l.kt)("code",null,"TaskDetailsPanelView")),"  "),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Param"),(0,l.kt)("th",null,"Type"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"[options]"),(0,l.kt)("td",null,(0,l.kt)("code",null,"Object")),(0,l.kt)("td",null,(0,l.kt)("p",null,"The options object will have the selected task/ workflow and context details. The options.node will have the selected ",(0,l.kt)("a",{href:"../../models/node.model"},"task/ workflow")," reference and it contains information about task/ workflow attributes like id, name etc. Conditions can be added based on these attributes to return true/false (show/hide the tab for the selected task/ workflow)."))),"  ")))}u.isMDXComponent=!0}}]);