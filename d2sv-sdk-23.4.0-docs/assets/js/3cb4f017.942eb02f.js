"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[5181],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||l;return n?o.createElement(f,r(r({ref:t},c),{},{components:n})):o.createElement(f,r({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[d]="string"==typeof e?e:i,r[1]=a;for(var p=2;p<l;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5972:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>p});var o=n(7462),i=(n(7294),n(3905));const l={},r="ClientSideBrowsableMixin",a={unversionedId:"api/nuc/models/browsable/client-side.mixin",id:"api/nuc/models/browsable/client-side.mixin",title:"ClientSideBrowsableMixin",description:"Implements paging, sorting and filtering on the client side using the",source:"@site/articles/api/nuc/models/browsable/client-side.mixin.md",sourceDirName:"api/nuc/models/browsable",slug:"/api/nuc/models/browsable/client-side.mixin",permalink:"/api/nuc/models/browsable/client-side.mixin",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"BrowsableMixin",permalink:"/api/nuc/models/browsable/browsable.mixin"},next:{title:"BrowsableV1RequestMixin",permalink:"/api/nuc/models/browsable/v1.request.mixin"}},s={},p=[{value:"Example",id:"example",level:3},{value:"makeClientSideBrowsable(options) : this",id:"makeclientsidebrowsableoptions--this",level:2},{value:"fetch(options) : promise",id:"fetchoptions--promise",level:2},{value:"populate(models, options) : promise",id:"populatemodels-options--promise",level:2},{value:"add(models, options) : models",id:"addmodels-options--models",level:2},{value:"remove(models, options) : models",id:"removemodels-options--models",level:2},{value:"reset(models, options) : models",id:"resetmodels-options--models",level:2},{value:"set(models, options) : models",id:"setmodels-options--models",level:2},{value:"compareObjectsForSort(property, left, right) : -1|0|1",id:"compareobjectsforsortproperty-left-right---101",level:2},{value:"See Also",id:"see-also",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"clientsidebrowsablemixin"},"ClientSideBrowsableMixin"),(0,i.kt)("p",null,"Implements paging, sorting and filtering on the client side using the\ncollection state of the ",(0,i.kt)("inlineCode",{parentName:"p"},"BrowsableMixin"),".  The ",(0,i.kt)("inlineCode",{parentName:"p"},"BrowsableMixin")," is\nincluded in this mixin and applied too."),(0,i.kt)("p",null,"The first ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," fills an internal buffer at first, then it populates\nthe collection according to the browsing state properties.  Following\nfetches are served from the internal buffer."),(0,i.kt)("p",null,"Request URL formatting and response parsing is supposed to be added\nby other mixins, according to the specifics of the server resource."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"var MyCollection = Backbone.Collection.extend({\n\n  constructor: function MyCollection(models, options) {\n    Backbone.Collection.prototype.constructor.apply(this, arguments);\n\n    this.makeClientSideBrowsable(options);\n  },\n\n  url: function () {\n    // format the request URL fetching the complete collection\n  },\n\n  parse: function (response, options) {\n    // return the response containing the complete collection\n  }\n\n});\n\nClientSideBrowsableMixin.mixin(MyCollection.prototype);\n")),(0,i.kt)("h2",{id:"makeclientsidebrowsableoptions--this"},"makeClientSideBrowsable(options) : this"),(0,i.kt)("p",null,"Must be called in the constructor to initialize the mixin functionality.\nExpects the Backbone.Collection constructor options passed in.  It calls\n",(0,i.kt)("inlineCode",{parentName:"p"},"makeBrowsable")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"BrowsableMixin")," too."),(0,i.kt)("h2",{id:"fetchoptions--promise"},"fetch(options) : promise"),(0,i.kt)("p",null,"Behaves like the original method, just populating the collection from an\ninternal buffer, filled on the very first fetch, according to the current\nbrowsing state.  If the ",(0,i.kt)("inlineCode",{parentName:"p"},"reload: true")," option is set, the internal buffer\nis refreshed by a server call."),(0,i.kt)("p",null,"A special scenario - continuously fetching the next page - can be implemented\nby incrementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"skipCount")," and fetching the items for appending them\nto the collection only:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"collection.setSkip(collection.skipCount + collection.topCount, false);\ncollection.fetch({\n  remove: false,\n  merge: false\n});\n")),(0,i.kt)("p",null,"If the continuous fetching reached its end should be checked by testing the\ncollection length, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"if (collection.length < collection.totalCount) {\n  ... // fetch the next page\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"totalCount")," is available first after the very first ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," call."),(0,i.kt)("p",null,"If you want to start fresh from the beginning in the middle of continuous\nfetching, change paging, sorting and filtering parameters and force removing\nthe existing models:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"collection.setSkip(0, false);\ncollection.fetch({\n  remove: true,\n  merge: false\n});\n")),(0,i.kt)("p",null,"You could add ",(0,i.kt)("inlineCode",{parentName:"p"},"reset: true")," to optimize UI refresh; instead of multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"add"),"\nevents you would get a single ",(0,i.kt)("inlineCode",{parentName:"p"},"reset")," event.  You would drop the ",(0,i.kt)("inlineCode",{parentName:"p"},"remove")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"merge")," parameters then, because the collection would be emptied."),(0,i.kt)("h2",{id:"populatemodels-options--promise"},"populate(models, options) : promise"),(0,i.kt)("p",null,"Behaves like the ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," method, but populates the collection from\nan explicit array of objects or models. All models will be pushed\nto the internal buffer and the collection will be populated according\nto its filtering, sorting and paging parameters."),(0,i.kt)("p",null,"You could add ",(0,i.kt)("inlineCode",{parentName:"p"},"reset: true")," to optimize UI refresh; instead of multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"add"),"\nevents you would get a single ",(0,i.kt)("inlineCode",{parentName:"p"},"reset")," event."),(0,i.kt)("h2",{id:"addmodels-options--models"},"add(models, options) : models"),(0,i.kt)("h2",{id:"removemodels-options--models"},"remove(models, options) : models"),(0,i.kt)("h2",{id:"resetmodels-options--models"},"reset(models, options) : models"),(0,i.kt)("h2",{id:"setmodels-options--models"},"set(models, options) : models"),(0,i.kt)("p",null,"Behave like original methods, just affecting both the collection\nand the internal buffer. The ",(0,i.kt)("inlineCode",{parentName:"p"},"reset")," method can be used to fill\nthe collection without a server-side ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch"),". Subsequential ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch"),"\nwill use the internal buffer to populate the collection."),(0,i.kt)("p",null,"A special scenario - emptying the collection, but not the internal buffer -\ncan be performed by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"reset")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"populate")," set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"You could add ",(0,i.kt)("inlineCode",{parentName:"p"},"reset: true")," to optimize UI refresh; instead of multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"add"),"\nevents you would get a single ",(0,i.kt)("inlineCode",{parentName:"p"},"reset")," event."),(0,i.kt)("h2",{id:"compareobjectsforsortproperty-left-right---101"},"compareObjectsForSort(property, left, right) : -1|0|1"),(0,i.kt)("p",null,"Can be overridden to modify the default ordering implementation, which handles\nJavaScript primitive values by applying the comparison operators to them.\nStrings are compared using grammar rules of the selected locale (i18n)."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"left")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"right")," parameters contain ",(0,i.kt)("inlineCode",{parentName:"p"},"Backbone.Model"),"s to compare and\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"property")," contains the attribute name from the models. The result has to\nbe implemented according to ",(0,i.kt)("inlineCode",{parentName:"p"},"strcmp"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"-1 if left < right"),(0,i.kt)("li",{parentName:"ul"},"1 if left > right"),(0,i.kt)("li",{parentName:"ul"},"0 if left = right")),(0,i.kt)("p",null,"The overridden method can handle only special attributes and can rely on the\noriginal implementation for the rest. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var originalCompare = MyCollection.prototype.compareObjectsForSort;\nMyCollection.prototype.compareObjectsForSort = function (property, left, right) {\n  if (property === 'name') {\n    left = left.get(property);\n    right = right.get(property);\n    if (left < right) {\n      return -1;\n    } else if (left > right) {\n      return 1;\n    }\n    return 0;\n  }\n  return originalCompare.call(this, property, left, right);\n};\n")),(0,i.kt)("h2",{id:"see-also"},"See Also"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BrowsableMixin")))}m.isMDXComponent=!0}}]);