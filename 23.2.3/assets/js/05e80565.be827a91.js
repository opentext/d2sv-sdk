"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[1620],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),a=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=a(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=a(t),d=r,f=p["".concat(c,".").concat(d)]||p[d]||m[d]||s;return t?o.createElement(f,i(i({ref:n},u),{},{components:t})):o.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var a=2;a<s;a++)i[a]=t[a];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5711:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var o=t(7462),r=(t(7294),t(3905));const s={},i="SyncableFromMultipleSourcesMixin",l={unversionedId:"api/nuc/models/mixins/syncable.from.multiple.sources/syncable.from.multiple.sources",id:"api/nuc/models/mixins/syncable.from.multiple.sources/syncable.from.multiple.sources",title:"SyncableFromMultipleSourcesMixin",description:"Simplifies implementing models and collections, which have to be fetched",source:"@site/articles/api/nuc/models/mixins/syncable.from.multiple.sources/syncable.from.multiple.sources.md",sourceDirName:"api/nuc/models/mixins/syncable.from.multiple.sources",slug:"/api/nuc/models/mixins/syncable.from.multiple.sources/",permalink:"/d2sv-sdk/23.2.0/api/nuc/models/mixins/syncable.from.multiple.sources/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"StateRequestorMixin",permalink:"/d2sv-sdk/23.2.0/api/nuc/models/mixins/state.requestor/state.requestor.mixin"},next:{title:"UploadableMixin",permalink:"/d2sv-sdk/23.2.0/api/nuc/models/mixins/uploadable/uploadable.mixin"}},c={},a=[{value:"How to apply the mixin to a model",id:"how-to-apply-the-mixin-to-a-model",level:3},{value:"How to combine multiple <code>$.ajax</code> calls",id:"how-to-combine-multiple-ajax-calls",level:3},{value:"How to combine multiple model/collection fetches",id:"how-to-combine-multiple-modelcollection-fetches",level:3},{value:"makeSyncableFromMultipleSources(options) : this",id:"makesyncablefrommultiplesourcesoptions--this",level:2},{value:"syncFromMultipleSources(promises, mergeSources, convertError, options) : promise",id:"syncfrommultiplesourcespromises-mergesources-converterror-options--promise",level:2}],u={toc:a},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"syncablefrommultiplesourcesmixin"},"SyncableFromMultipleSourcesMixin"),(0,r.kt)("p",null,"Simplifies implementing models and collections, which have to be fetched\nby issuing multiple asynchronous calls. Either by executing multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"$.ajax"),"\nstatements, or by feching multiple models or collections and merging their\ncontent."),(0,r.kt)("h3",{id:"how-to-apply-the-mixin-to-a-model"},"How to apply the mixin to a model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"var MyModel = Backbone.Model.extend({\n\n  constructor: function MyModel(attributes, options) {\n    Backbone.Model.prototype.constructor.apply(this, arguments);\n    this.makeSyncableFromMultipleSources(options);\n  },\n\n  sync: function (method, model, options) {\n    return this.syncFromMultipleSources(\n      [...promises], this._mergeSources,\n      this._convertError, options);\n  },\n\n  _mergeSources: function (...results) {\n    return merged response;\n  },\n\n  _convertError: function (result) {\n    return {\n      status: ...,\n      statusText: '...',\n      responseJSON: ...\n    };\n  }\n  \n});\n\nSyncableFromMultipleSources.mixin(MyModel.prototype);\n")),(0,r.kt)("h3",{id:"how-to-combine-multiple-ajax-calls"},"How to combine multiple ",(0,r.kt)("inlineCode",{parentName:"h3"},"$.ajax")," calls"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  sync: function (method, model, options) {\n    var first = $.ajax(this.connector.extendAjaxOptions({\n                   url: '...'\n                 })\n                 .then(function (response) {\n                   return response;\n                 }),\n        second = $.ajax(this.connector.extendAjaxOptions({\n                    url: '...'\n                  })\n                  .then(function (response) {\n                    return response;\n                  });\n    return this.syncFromMultipleSources(\n        [first, second], this._mergeSources, options);\n  },\n\n  _mergeSources: function (first, second) {\n    return merged response to be parsed;\n  }\n")),(0,r.kt)("h3",{id:"how-to-combine-multiple-modelcollection-fetches"},"How to combine multiple model/collection fetches"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  sync: function (method, model, options) {\n    var first = new FirstModel(...),\n        second = new SecondCollection(...);\n    first = first.fetch(options)\n                 .then(function () {\n                   return first.toJSON()\n                 }),\n    second = second.fetch(options)\n                   .then(function () {\n                     return second.toJSON()\n                   }),\n    options.parse = false;\n    return this.syncFromMultipleSources(\n        [first, second], this._mergeSources, options);\n  },\n\n  _mergeSources: function (first, second) {\n    return already parsed merged response;\n  }\n")),(0,r.kt)("h2",{id:"makesyncablefrommultiplesourcesoptions--this"},"makeSyncableFromMultipleSources(options) : this"),(0,r.kt)("p",null,"Must be called in the constructor to initialize the mixin functionality.\nExpects the Backbone.Model or Backbone.Collection constructor options passed in."),(0,r.kt)("h2",{id:"syncfrommultiplesourcespromises-mergesources-converterror-options--promise"},"syncFromMultipleSources(promises, mergeSources, convertError, options) : promise"),(0,r.kt)("p",null,"Implements the interface (events, callbacks and promise) of ",(0,r.kt)("inlineCode",{parentName:"p"},"Backbone.sync"),"\nby waiting on the source promises and by resolving the target promise with\nthe merged response returned by the caller's callback, which receives results\nof the source promises to merge them."),(0,r.kt)("p",null,"If one of the source promises fails, the rejected result will be passed\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"convertError"),", which is an optional parameter. (A function expecting\nrejected result from $.ajax will be used by default.) If specified, it\nhas to return an object simulating the jQuery AJAX object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"    {\n      statusText: '...',\n      responseJSON: {...}\n    }\n")))}m.isMDXComponent=!0}}]);