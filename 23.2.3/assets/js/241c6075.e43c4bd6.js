"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[9433],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),h=s(n),u=o,m=h["".concat(c,".").concat(u)]||h[u]||d[u]||l;return n?i.createElement(m,r(r({ref:t},p),{},{components:n})):i.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=u;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[h]="string"==typeof e?e:o,r[1]=a;for(var s=2;s<l;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var i=n(7462),o=(n(7294),n(3905));const l={},r="FetchableMixin",a={unversionedId:"api/nuc/models/mixins/fetchable/fetchable.mixin",id:"api/nuc/models/mixins/fetchable/fetchable.mixin",title:"FetchableMixin",description:"Makes the calls to the fetch method more robust by:",source:"@site/articles/api/nuc/models/mixins/fetchable/fetchable.mixin.md",sourceDirName:"api/nuc/models/mixins/fetchable",slug:"/api/nuc/models/mixins/fetchable/fetchable.mixin",permalink:"/23.2.0/api/nuc/models/mixins/fetchable/fetchable.mixin",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"ExpandableMixin",permalink:"/23.2.0/api/nuc/models/mixins/expandable/expandable.mixin"},next:{title:"IncludingAdditionalResourcesMixin",permalink:"/23.2.0/api/nuc/models/mixins/including.additional.resources/including.additional.resource.mixin"}},c={},s=[{value:"Remarks",id:"remarks",level:2},{value:"How to apply the mixin to a collection",id:"how-to-apply-the-mixin-to-a-collection",level:3},{value:"How use the mixin",id:"how-use-the-mixin",level:3},{value:"makeFetchable(options) : this",id:"makefetchableoptions--this",level:2},{value:"fetching",id:"fetching",level:2},{value:"fetched",id:"fetched",level:2},{value:"error",id:"error",level:2},{value:"ensureFetched(options) : promise",id:"ensurefetchedoptions--promise",level:2},{value:"invalidateFetch",id:"invalidatefetch",level:2},{value:"See Also",id:"see-also",level:2}],p={toc:s},h="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fetchablemixin"},"FetchableMixin"),(0,o.kt)("p",null,"Makes the calls to the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," method more robust by:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"preventing multiple server calls when the ",(0,o.kt)("inlineCode",{parentName:"li"},"fetch")," is called quickly\none call after another"),(0,o.kt)("li",{parentName:"ul"},"setting the ",(0,o.kt)("inlineCode",{parentName:"li"},"reset")," option automatically to optimize collections\nloading (if requested)"),(0,o.kt)("li",{parentName:"ul"},"checking, if the model has already been fetched and ensuring, that\na model has always been fetched before it is used")),(0,o.kt)("h2",{id:"remarks"},"Remarks"),(0,o.kt)("p",null,"This mixin overrides the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," method and calls the original\nimplementation from it.  If you supply your own custom implementation\nof this method, or use another mixin which overrides it, you should apply\nthis mixin after yours."),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," method is called and the previous call has not ended yet, ",(0,o.kt)("strong",{parentName:"p"},"the new call\nwill not be made"),".  The promise returned by the previous call will be returned instead.\nIf you specified different options than for the previous call, they will not be reflected."),(0,o.kt)("h3",{id:"how-to-apply-the-mixin-to-a-collection"},"How to apply the mixin to a collection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var MyCollection = Backbone.Collection.extend({\n\n  constructor: function MyCollection(models, options) {\n    Backbone.Collection.prototype.constructor.apply(this, arguments);\n    this\n      .makeConnectable(options)\n      .makeFetchable(options);\n  }\n  \n});\n\nConnectableMixin.mixin(MyCollection.prototype);\nFetchableMixin.mixin(MyCollection.prototype);\n")),(0,o.kt)("p",null,"This mixin us usually combined together with the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectableMixin"),"\nor with another cumulated mixin which includes it."),(0,o.kt)("h3",{id:"how-use-the-mixin"},"How use the mixin"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// Set the `reset` option for the future `fetch` calls automatically\nvar collection = new MyCollection(undefined, {\n      connector: connector,\n      autoreset: true\n    });\ncollection.fetch();\n\n// Ensure that the collection has been fetched and process it (I)\ncollection\n  .ensureFetched()\n  .done(function () {\n    ...\n  });\n")),(0,o.kt)("h2",{id:"makefetchableoptions--this"},"makeFetchable(options) : this"),(0,o.kt)("p",null,"Must be called in the constructor to initialize the mixin functionality.\nExpects the Backbone.Model or Backbone.Collection constructor options passed in."),(0,o.kt)("p",null,"Recognized option properies:"),(0,o.kt)("p",null,"autoreset\n: If set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"reset")," option for the future ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," calls will be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"\nautomatically, unless this option is not set by the caller (boolean, ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," by default)"),(0,o.kt)("h2",{id:"fetching"},"fetching"),(0,o.kt)("p",null,"Can be checked to test whether the model or collection is currently being fetched.\nWhen fetching is in progress, it contains the promise returned by the most recent\n",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," call.  When no fetching is in proress it is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". (promise or boolean,\nread-only)"),(0,o.kt)("h2",{id:"fetched"},"fetched"),(0,o.kt)("p",null,"Can be checked to test whether the most recent ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," call has succeeded or not\non this model or collection; it is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," on the first occurrence\nand never changed afterwards (boolean, read-only)"),(0,o.kt)("h2",{id:"error"},"error"),(0,o.kt)("p",null,"Contains an error if the most recent ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," call failed.  It is ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"\nif the most recent ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," call succeeded (Error, read-only)"),(0,o.kt)("h2",{id:"ensurefetchedoptions--promise"},"ensureFetched(options) : promise"),(0,o.kt)("p",null,"Returns a promise resolved as soon as the model is fetched.  It fetches the model,\nif it has not been fetched yet, or it returns immediately, when the model has already\nbeen fetched."),(0,o.kt)("h2",{id:"invalidatefetch"},"invalidateFetch"),(0,o.kt)("p",null,"Invalidates the fetched state of the collection so that the next ensureFetched() call\nwill fetch the data."),(0,o.kt)("h2",{id:"see-also"},"See Also"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ConnectableMixin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceMixin")))}d.isMDXComponent=!0}}]);