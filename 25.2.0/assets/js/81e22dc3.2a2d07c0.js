"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[4011],{5680:(e,r,n)=>{n.d(r,{xA:()=>d,yg:()=>u});var o=n(6540);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var g=o.createContext({}),p=function(e){var r=o.useContext(g),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},d=function(e){var r=p(e.components);return o.createElement(g.Provider,{value:r},e.children)},y="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},c=o.forwardRef((function(e,r){var n=e.components,t=e.mdxType,l=e.originalType,g=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),y=p(n),c=t,u=y["".concat(g,".").concat(c)]||y[c]||m[c]||l;return n?o.createElement(u,a(a({ref:r},d),{},{components:n})):o.createElement(u,a({ref:r},d))}));function u(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=n.length,a=new Array(l);a[0]=c;var i={};for(var g in r)hasOwnProperty.call(r,g)&&(i[g]=r[g]);i.originalType=e,i[y]="string"==typeof e?e:t,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8786:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>g,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=n(8168),t=(n(6540),n(5680));const l={},a=void 0,i={unversionedId:"api/d2/controls/form/form.converter",id:"api/d2/controls/form/form.converter",title:"form.converter",description:"FormConverter : d2/sdk/controls/form/form.converter",source:"@site/articles/api/d2/controls/form/form.converter.md",sourceDirName:"api/d2/controls/form",slug:"/api/d2/controls/form/form.converter",permalink:"/d2sv-sdk/25.2.0/api/d2/controls/form/form.converter",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"stepper.wizard",permalink:"/d2sv-sdk/25.2.0/api/d2/controls/dialogs/stepper.wizard"},next:{title:"form.model",permalink:"/d2sv-sdk/25.2.0/api/d2/controls/form/form.model"}},g={},p=[{value:"FormConverter : <code>d2/sdk/controls/form/form.converter</code>",id:"formconverter--d2sdkcontrolsformformconverter",level:2},{value:"FormConverter.convertConfig(formJSON, options) \u21d2 <code>ConversionReturnType</code>",id:"formconverterconvertconfigformjson-options--conversionreturntype",level:3},{value:"FormConverter.generateFormModelConfig(formArray, options) \u21d2 <code>void</code>",id:"formconvertergenerateformmodelconfigformarray-options--void",level:3},{value:"FormConverter~ConversionReturnType : <code>Object</code>",id:"formconverterconversionreturntype--object",level:3},{value:"FormConverter~AlpacaSchema : <code>Object</code>",id:"formconverteralpacaschema--object",level:3}],d={toc:p},y="wrapper";function m(e){let{components:r,...n}=e;return(0,t.yg)(y,(0,o.A)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("a",{name:"module_FormConverter"}),(0,t.yg)("h2",{id:"formconverter--d2sdkcontrolsformformconverter"},"FormConverter : ",(0,t.yg)("code",null,"d2/sdk/controls/form/form.converter")),(0,t.yg)("p",null,"Form converter. Utility to transform D2 Form metadata."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Extends"),": ",(0,t.yg)("code",null,"Object"),"  "),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#module_FormConverter"},"FormConverter")," : ",(0,t.yg)("code",null,"d2/sdk/controls/form/form.converter"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("em",{parentName:"li"},"static"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#module_FormConverter.convertConfig"},".convertConfig(formJSON, options)")," \u21d2 ",(0,t.yg)("code",null,"ConversionReturnType")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#module_FormConverter.generateFormModelConfig"},".generateFormModelConfig(formArray, [options])")," \u21d2 ",(0,t.yg)("code",null,"void")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("em",{parentName:"li"},"inner"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#module_FormConverter..ConversionReturnType"},"~ConversionReturnType")," : ",(0,t.yg)("code",null,"Object")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#module_FormConverter..AlpacaSchema"},"~AlpacaSchema")," : ",(0,t.yg)("code",null,"Object"))))))),(0,t.yg)("a",{name:"module_FormConverter.convertConfig"}),(0,t.yg)("h3",{id:"formconverterconvertconfigformjson-options--conversionreturntype"},"FormConverter.convertConfig(formJSON, options) \u21d2 ",(0,t.yg)("code",null,"ConversionReturnType")),(0,t.yg)("p",null,"Convert a D2 Form metadata into an Alpaca form schema."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Kind"),": static method of ",(0,t.yg)("a",{parentName:"p",href:"#module_FormConverter"},(0,t.yg)("code",null,"FormConverter")),(0,t.yg)("br",{parentName:"p"}),"\n",(0,t.yg)("strong",{parentName:"p"},"Returns"),": ",(0,t.yg)("code",null,"ConversionReturnType")," - ",(0,t.yg)("inlineCode",{parentName:"p"},"propertiesConfig")," & ",(0,t.yg)("inlineCode",{parentName:"p"},"signOffConfig")," are two separate alpaca form schema to collect properties and user's electronic signature.",(0,t.yg)("br",{parentName:"p"}),"\n",(0,t.yg)("strong",{parentName:"p"},"Note"),": Alpaca form schema generated through this method does not have to go through ",(0,t.yg)("inlineCode",{parentName:"p"},"generateFormModelConfig()")," method below.",(0,t.yg)("br",{parentName:"p"}),"\n",(0,t.yg)("strong",{parentName:"p"},"See"),": ",(0,t.yg)("a",{parentName:"p",href:"http://www.alpacajs.org/docs/api/forms.html"},"Alpaca Forms"),"  "),(0,t.yg)("table",null,(0,t.yg)("thead",null,(0,t.yg)("tr",null,(0,t.yg)("th",null,"Param"),(0,t.yg)("th",null,"Type"),(0,t.yg)("th",null,"Description"))),(0,t.yg)("tbody",null,(0,t.yg)("tr",null,(0,t.yg)("td",null,"formJSON"),(0,t.yg)("td",null,(0,t.yg)("code",null,"JSON")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Raw dialog-like response received from a D2-REST API or an equivalent object constructed literally."))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"options"),(0,t.yg)("td",null,(0,t.yg)("code",null,"Object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Holder of transformer parameters"))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"[options.actionMode]"),(0,t.yg)("td",null,(0,t.yg)("code",null,"string")),(0,t.yg)("td",null,(0,t.yg)("p",null,"How to process the fields. Can be one of 'create', 'read', 'edit'. 'read' is for readonly mode, other two are editable. Value of this option influences the list of fields and their conditions processed as per equivalent D2-config property page field modes."))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"[options.layoutMode]"),(0,t.yg)("td",null,(0,t.yg)("code",null,"string")),(0,t.yg)("td",null,(0,t.yg)("p",null,"By default fields are laid out in a double column fashion, if a single-column is desired instead set this option to 'singleCol'."))),"  ")),(0,t.yg)("a",{name:"module_FormConverter.generateFormModelConfig"}),(0,t.yg)("h3",{id:"formconvertergenerateformmodelconfigformarray-options--void"},"FormConverter.generateFormModelConfig(formArray, ","[options]",") \u21d2 ",(0,t.yg)("code",null,"void")),(0,t.yg)("p",null,"Inject additional data into an Alpaca form schema and make it compatible for ",(0,t.yg)("a",{parentName:"p",href:"./form.model"},"FormModel")," & ",(0,t.yg)("a",{parentName:"p",href:"./form.view"},"FormView"),".\nIf more than one form is passed in the input, the method also generates cross-reference data if one form uses value from other, for any reason."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Kind"),": static method of ",(0,t.yg)("a",{parentName:"p",href:"#module_FormConverter"},(0,t.yg)("code",null,"FormConverter")),"  "),(0,t.yg)("table",null,(0,t.yg)("thead",null,(0,t.yg)("tr",null,(0,t.yg)("th",null,"Param"),(0,t.yg)("th",null,"Type"),(0,t.yg)("th",null,"Description"))),(0,t.yg)("tbody",null,(0,t.yg)("tr",null,(0,t.yg)("td",null,"formArray"),(0,t.yg)("td",null,(0,t.yg)("code",null,"Array.<AlpacaSchema>")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Array of Alpaca form schemas. The parameter is also the output parameter, each element in the array is modified with additional data."))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"[options]"),(0,t.yg)("td",null,(0,t.yg)("code",null,"object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Additional data/control flag used during the conversion."))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"[options.initialFieldValueMap]"),(0,t.yg)("td",null,(0,t.yg)("code",null,"object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Initial data reference for all the fields across forms."))),"  ")),(0,t.yg)("a",{name:"module_FormConverter..ConversionReturnType"}),(0,t.yg)("h3",{id:"formconverterconversionreturntype--object"},"FormConverter~ConversionReturnType : ",(0,t.yg)("code",null,"Object")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Kind"),": inner typedef of ",(0,t.yg)("a",{parentName:"p",href:"#module_FormConverter"},(0,t.yg)("code",null,"FormConverter")),(0,t.yg)("br",{parentName:"p"}),"\n",(0,t.yg)("strong",{parentName:"p"},"Properties")),(0,t.yg)("table",null,(0,t.yg)("thead",null,(0,t.yg)("tr",null,(0,t.yg)("th",null,"Name"),(0,t.yg)("th",null,"Type"),(0,t.yg)("th",null,"Description"))),(0,t.yg)("tbody",null,(0,t.yg)("tr",null,(0,t.yg)("td",null,"propertiesConfig"),(0,t.yg)("td",null,(0,t.yg)("code",null,"Object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Alpaca schema for the main form"))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"signOffConfig"),(0,t.yg)("td",null,(0,t.yg)("code",null,"Object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Alpaca schema for D2 Electronic signature form"))),"  ")),(0,t.yg)("a",{name:"module_FormConverter..AlpacaSchema"}),(0,t.yg)("h3",{id:"formconverteralpacaschema--object"},"FormConverter~AlpacaSchema : ",(0,t.yg)("code",null,"Object")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Kind"),": inner typedef of ",(0,t.yg)("a",{parentName:"p",href:"#module_FormConverter"},(0,t.yg)("code",null,"FormConverter")),(0,t.yg)("br",{parentName:"p"}),"\n",(0,t.yg)("strong",{parentName:"p"},"See"),": ",(0,t.yg)("a",{parentName:"p",href:"http://www.alpacajs.org/docs/api/forms.html"},"Alpaca Forms"),(0,t.yg)("br",{parentName:"p"}),"\n",(0,t.yg)("strong",{parentName:"p"},"Properties")),(0,t.yg)("table",null,(0,t.yg)("thead",null,(0,t.yg)("tr",null,(0,t.yg)("th",null,"Name"),(0,t.yg)("th",null,"Type"),(0,t.yg)("th",null,"Description"))),(0,t.yg)("tbody",null,(0,t.yg)("tr",null,(0,t.yg)("td",null,"data"),(0,t.yg)("td",null,(0,t.yg)("code",null,"object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Object hash of initial values for each field property"))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"schema"),(0,t.yg)("td",null,(0,t.yg)("code",null,"object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Container of schema properties"))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"schema.properties"),(0,t.yg)("td",null,(0,t.yg)("code",null,"object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Object hash defining schema for each field property."))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"options"),(0,t.yg)("td",null,(0,t.yg)("code",null,"object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Container of additional options"))),(0,t.yg)("tr",null,(0,t.yg)("td",null,"options.fields"),(0,t.yg)("td",null,(0,t.yg)("code",null,"object")),(0,t.yg)("td",null,(0,t.yg)("p",null,"Object hash defining options for each field property."))),"  ")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example"),"  "),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"var form = {\n   data: {\n     field1: 'Hello world!'\n   },\n   schema: {\n     properties: {\n       field1: {\n         type: 'string',\n         required: true\n       }\n     }\n   },\n   options: {\n     fields: {\n       field1: {\n         type: 'text',\n         label: 'Greetings'\n       }\n     }\n   }\n};\n")))}m.isMDXComponent=!0}}]);