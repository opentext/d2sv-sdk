"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[6119],{5680:(e,l,o)=>{o.d(l,{xA:()=>u,yg:()=>p});var r=o(6540);function n(e,l,o){return l in e?Object.defineProperty(e,l,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[l]=o,e}function a(e,l){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);l&&(r=r.filter((function(l){return Object.getOwnPropertyDescriptor(e,l).enumerable}))),o.push.apply(o,r)}return o}function t(e){for(var l=1;l<arguments.length;l++){var o=null!=arguments[l]?arguments[l]:{};l%2?a(Object(o),!0).forEach((function(l){n(e,l,o[l])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(l){Object.defineProperty(e,l,Object.getOwnPropertyDescriptor(o,l))}))}return e}function i(e,l){if(null==e)return{};var o,r,n=function(e,l){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],l.indexOf(o)>=0||(n[o]=e[o]);return n}(e,l);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],l.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var d=r.createContext({}),m=function(e){var l=r.useContext(d),o=l;return e&&(o="function"==typeof e?e(l):t(t({},l),e)),o},u=function(e){var l=m(e.components);return r.createElement(d.Provider,{value:l},e.children)},g="mdxType",y={inlineCode:"code",wrapper:function(e){var l=e.children;return r.createElement(r.Fragment,{},l)}},c=r.forwardRef((function(e,l){var o=e.components,n=e.mdxType,a=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=m(o),c=n,p=g["".concat(d,".").concat(c)]||g[c]||y[c]||a;return o?r.createElement(p,t(t({ref:l},u),{},{components:o})):r.createElement(p,t({ref:l},u))}));function p(e,l){var o=arguments,n=l&&l.mdxType;if("string"==typeof e||n){var a=o.length,t=new Array(a);t[0]=c;var i={};for(var d in l)hasOwnProperty.call(l,d)&&(i[d]=l[d]);i.originalType=e,i[g]="string"==typeof e?e:n,t[1]=i;for(var m=2;m<a;m++)t[m]=o[m];return r.createElement.apply(null,t)}return r.createElement.apply(null,o)}c.displayName="MDXCreateElement"},6485:(e,l,o)=>{o.r(l),o.d(l,{assets:()=>d,contentTitle:()=>t,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>m});var r=o(8168),n=(o(6540),o(5680));const a={},t=void 0,i={unversionedId:"api/d2/controls/form/form.view",id:"api/d2/controls/form/form.view",title:"form.view",description:"FormView : d2/sdk/controls/form/form.view",source:"@site/articles/api/d2/controls/form/form.view.md",sourceDirName:"api/d2/controls/form",slug:"/api/d2/controls/form/form.view",permalink:"/d2sv-sdk/25.2.0/api/d2/controls/form/form.view",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"form.model",permalink:"/d2sv-sdk/25.2.0/api/d2/controls/form/form.model"},next:{title:"globalmessage",permalink:"/d2sv-sdk/25.2.0/api/d2/controls/globalmessage/"}},d={},m=[{value:"FormView : <code>d2/sdk/controls/form/form.view</code>",id:"formview--d2sdkcontrolsformformview",level:2},{value:"formView.resetForm() \u21d2 <code>void</code>",id:"formviewresetform--void",level:3},{value:"formView.validateForm(refreshState, validateOnlyRequiredFields) \u21d2 <code>jQuery.Promise</code>",id:"formviewvalidateformrefreshstate-validateonlyrequiredfields--jquerypromise",level:3},{value:"formView.getValues() \u21d2 <code>object</code>",id:"formviewgetvalues--object",level:3},{value:"formView.getFlatFormValueMap(valueMap) \u21d2 <code>object</code>",id:"formviewgetflatformvaluemapvaluemap--object",level:3},{value:"formView.getLabelOrValues() \u21d2 <code>object</code>",id:"formviewgetlabelorvalues--object",level:3},{value:"&quot;d2:change:formValidation&quot;",id:"d2changeformvalidation",level:3},{value:"&quot;change:field&quot;",id:"changefield",level:3},{value:"&quot;valid:field&quot;",id:"validfield",level:3},{value:"&quot;invalid:field&quot;",id:"invalidfield",level:3},{value:"&quot;form:changed&quot;",id:"formchanged",level:3},{value:"&quot;render:form&quot;",id:"renderform",level:3},{value:"FormView~FormView",id:"formviewformview",level:3},{value:"new FormView(options)",id:"new-formviewoptions",level:4},{value:"FormView~FormValidationCallback : <code>function</code>",id:"formviewformvalidationcallback--function",level:3}],u={toc:m},g="wrapper";function y(e){let{components:l,...o}=e;return(0,n.yg)(g,(0,r.A)({},u,o,{components:l,mdxType:"MDXLayout"}),(0,n.yg)("a",{name:"module_FormView"}),(0,n.yg)("h2",{id:"formview--d2sdkcontrolsformformview"},"FormView : ",(0,n.yg)("code",null,"d2/sdk/controls/form/form.view")),(0,n.yg)("p",null,"FormView. Create and render an arbitrary HTML form using JSON schema. Form also provides manage API to validate & collect form data."),(0,n.yg)("p",null,"Uses ",(0,n.yg)("inlineCode",{parentName:"p"},"FormModel")," to hold the JSON schema that drives the form rendering. See ",(0,n.yg)("a",{parentName:"p",href:"./form.model"},"FormModel")," for examples of how to\ncreate a ",(0,n.yg)("inlineCode",{parentName:"p"},"FormModel")," from literal JSON data and dialog-like D2-REST API response."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Extends"),": ",(0,n.yg)("a",{parentName:"p",href:"https://marionettejs.com/docs/v2.4.7/marionette.itemview.html"},(0,n.yg)("code",null,"Marionette.ItemView")),(0,n.yg)("br",{parentName:"p"}),"\n",(0,n.yg)("strong",{parentName:"p"},"Emits"),": ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView+event_d2_change_formValidation"},(0,n.yg)("code",null,"d2:change:formValidation")),", ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView+change_field"},(0,n.yg)("code",null,"change:field")),", ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView+valid_field"},(0,n.yg)("code",null,"valid:field")),", ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView+invalid_field"},(0,n.yg)("code",null,"invalid:field")),", ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView+form_changed"},(0,n.yg)("code",null,"form:changed")),", ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView+render_form"},(0,n.yg)("code",null,"render:form")),(0,n.yg)("br",{parentName:"p"}),"\n",(0,n.yg)("strong",{parentName:"p"},"Example")," ",(0,n.yg)("em",{parentName:"p"},"(To create a form view)"),"  "),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-js"},"define([\n 'd2/sdk/controls/form/form.view',\n 'd2/sdk/controls/form/form.model'\n], function(FormView, FormModel){\n 'use strict';\n\n var formOptions = {\n   topAlignedLabel: true,\n   mode: 'create',\n   layoutMode: 'singleCol',\n   model: createFormModel()\n };\n\n function createFormModel() {\n   var formSchema;\n\n   // populate form schema\n\n   return new FormModel(formSchema);\n }\n\n var formView = new FormView(formOptions); //For controlling any business specific, behavior FormView could be extended to attach business specific logic\n\n formView.on('render:form', function(){\n   console.log('Form is rendered');\n });\n\n new Marionette.Region({el: '.my-form-container'}).show(formView);\n});\n")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView"},"FormView")," : ",(0,n.yg)("code",null,"d2/sdk/controls/form/form.view"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("em",{parentName:"li"},"instance"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+resetForm"},".resetForm()")," \u21d2 ",(0,n.yg)("code",null,"void")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+validateForm"},".validateForm(refreshState, validateOnlyRequiredFields)")," \u21d2 ",(0,n.yg)("code",null,"jQuery.Promise")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+getValues"},".getValues()")," \u21d2 ",(0,n.yg)("code",null,"object")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+getFlatFormValueMap"},".getFlatFormValueMap(valueMap)")," \u21d2 ",(0,n.yg)("code",null,"object")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+getLabelOrValues"},".getLabelOrValues()")," \u21d2 ",(0,n.yg)("code",null,"object")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+event_d2_change_formValidation"},'"d2:change:formValidation"')),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+change_field"},'"change:field"')),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+valid_field"},'"valid:field"')),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+invalid_field"},'"invalid:field"')),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+form_changed"},'"form:changed"')),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView+render_form"},'"render:form"')))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("em",{parentName:"li"},"inner"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView..FormView"},"~FormView"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#new_module_FormView..FormView_new"},"new FormView(options)")))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"#module_FormView..FormValidationCallback"},"~FormValidationCallback")," : ",(0,n.yg)("code",null,"function"))))))),(0,n.yg)("a",{name:"module_FormView+resetForm"}),(0,n.yg)("h3",{id:"formviewresetform--void"},"formView.resetForm() \u21d2 ",(0,n.yg)("code",null,"void")),(0,n.yg)("p",null,"Reset the current form removing all user inputs."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("a",{name:"module_FormView+validateForm"}),(0,n.yg)("h3",{id:"formviewvalidateformrefreshstate-validateonlyrequiredfields--jquerypromise"},"formView.validateForm(refreshState, validateOnlyRequiredFields) \u21d2 ",(0,n.yg)("code",null,"jQuery.Promise")),(0,n.yg)("p",null,"Validate current form values and ensure form constraints are met."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),(0,n.yg)("br",{parentName:"p"}),"\n",(0,n.yg)("strong",{parentName:"p"},"Returns"),": ",(0,n.yg)("code",null,"jQuery.Promise")," - - Promise is resolved with validation status. A ",(0,n.yg)("inlineCode",{parentName:"p"},"FormValidationDone")," callback could be invoked with the validation result.  "),(0,n.yg)("table",null,(0,n.yg)("thead",null,(0,n.yg)("tr",null,(0,n.yg)("th",null,"Param"),(0,n.yg)("th",null,"Type"),(0,n.yg)("th",null,"Description"))),(0,n.yg)("tbody",null,(0,n.yg)("tr",null,(0,n.yg)("td",null,"refreshState"),(0,n.yg)("td",null,(0,n.yg)("code",null,"Boolean")),(0,n.yg)("td",null,(0,n.yg)("p",null,"Whether to clear previous validation status before running this one."))),(0,n.yg)("tr",null,(0,n.yg)("td",null,"validateOnlyRequiredFields"),(0,n.yg)("td",null,(0,n.yg)("code",null,"Boolean")),(0,n.yg)("td",null,(0,n.yg)("p",null,"Whether to perform only a required field validation or all other constraints as well."))),"  ")),(0,n.yg)("a",{name:"module_FormView+getValues"}),(0,n.yg)("h3",{id:"formviewgetvalues--object"},"formView.getValues() \u21d2 ",(0,n.yg)("code",null,"object")),(0,n.yg)("p",null,"Get current field values"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),(0,n.yg)("br",{parentName:"p"}),"\n",(0,n.yg)("strong",{parentName:"p"},"Returns"),": ",(0,n.yg)("code",null,"object")," - A JSON in the same structure as the form's field layout definition, it contains key-value pairs at each level where key corresponds\nto form field name and value corresponds to the data collected from the field.  "),(0,n.yg)("a",{name:"module_FormView+getFlatFormValueMap"}),(0,n.yg)("h3",{id:"formviewgetflatformvaluemapvaluemap--object"},"formView.getFlatFormValueMap(valueMap) \u21d2 ",(0,n.yg)("code",null,"object")),(0,n.yg)("p",null,"Get current field values formatted as a flattened single level key-value hash."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),(0,n.yg)("br",{parentName:"p"}),"\n",(0,n.yg)("strong",{parentName:"p"},"Returns"),": ",(0,n.yg)("code",null,"object")," - Flattened key-value map.  "),(0,n.yg)("table",null,(0,n.yg)("thead",null,(0,n.yg)("tr",null,(0,n.yg)("th",null,"Param"),(0,n.yg)("th",null,"Type"),(0,n.yg)("th",null,"Description"))),(0,n.yg)("tbody",null,(0,n.yg)("tr",null,(0,n.yg)("td",null,"valueMap"),(0,n.yg)("td",null,(0,n.yg)("code",null,"object")),(0,n.yg)("td",null,(0,n.yg)("p",null,"The hierarchical form value map. Basically the return value of ",(0,n.yg)("code",null,"getValues()")," could be passed as this parameter."))),"  ")),(0,n.yg)("a",{name:"module_FormView+getLabelOrValues"}),(0,n.yg)("h3",{id:"formviewgetlabelorvalues--object"},"formView.getLabelOrValues() \u21d2 ",(0,n.yg)("code",null,"object")),(0,n.yg)("p",null,"Ge the current field label in the case combo/liost fields and in the case of other fields it will return the values"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),(0,n.yg)("br",{parentName:"p"}),"\n",(0,n.yg)("strong",{parentName:"p"},"Returns"),": ",(0,n.yg)("code",null,"object")," - A JSON in the same structure as the form's field layout definition, it contains key-value pairs at each level where key corresponds\nto form field name and value corresponds to the data collected from the field.  "),(0,n.yg)("a",{name:"module_FormView+event_d2_change_formValidation"}),(0,n.yg)("h3",{id:"d2changeformvalidation"},'"d2:change:formValidation"'),(0,n.yg)("p",null,"Indicates form validation status has changed."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": event emitted by ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("a",{name:"module_FormView+change_field"}),(0,n.yg)("h3",{id:"changefield"},'"change:field"'),(0,n.yg)("p",null,"Indicates a field value has been updated."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": event emitted by ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("a",{name:"module_FormView+valid_field"}),(0,n.yg)("h3",{id:"validfield"},'"valid:field"'),(0,n.yg)("p",null,"Indicates a field contains a valid value."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": event emitted by ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("a",{name:"module_FormView+invalid_field"}),(0,n.yg)("h3",{id:"invalidfield"},'"invalid:field"'),(0,n.yg)("p",null,"Indicates a field contains an invalid value."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": event emitted by ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("a",{name:"module_FormView+form_changed"}),(0,n.yg)("h3",{id:"formchanged"},'"form:changed"'),(0,n.yg)("p",null,"Indicates that form data has changed somehow."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": event emitted by ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("a",{name:"module_FormView+render_form"}),(0,n.yg)("h3",{id:"renderform"},'"render:form"'),(0,n.yg)("p",null,"Indicates that form has been fully rendered in UI"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": event emitted by ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("a",{name:"module_FormView..FormView"}),(0,n.yg)("h3",{id:"formviewformview"},"FormView~FormView"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": inner class of ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("a",{name:"new_module_FormView..FormView_new"}),(0,n.yg)("h4",{id:"new-formviewoptions"},"new FormView(options)"),(0,n.yg)("table",null,(0,n.yg)("thead",null,(0,n.yg)("tr",null,(0,n.yg)("th",null,"Param"),(0,n.yg)("th",null,"Type"),(0,n.yg)("th",null,"Description"))),(0,n.yg)("tbody",null,(0,n.yg)("tr",null,(0,n.yg)("td",null,"options"),(0,n.yg)("td",null,(0,n.yg)("code",null,"object")),(0,n.yg)("td",null,(0,n.yg)("p",null,"Constructor options"))),(0,n.yg)("tr",null,(0,n.yg)("td",null,"options.model"),(0,n.yg)("td",null,(0,n.yg)("code",null,(0,n.yg)("a",{href:"./form.model"},"FormModel"))),(0,n.yg)("td",null,(0,n.yg)("p",null,"The data holder having schema definition for this form instance."))),(0,n.yg)("tr",null,(0,n.yg)("td",null,"options.context"),(0,n.yg)("td",null,(0,n.yg)("code",null,"Context")),(0,n.yg)("td",null,(0,n.yg)("p",null,"Reference to the application context."))),(0,n.yg)("tr",null,(0,n.yg)("td",null,"[options.topAlignedLabel]"),(0,n.yg)("td",null,(0,n.yg)("code",null,"Boolean")),(0,n.yg)("td",null,(0,n.yg)("p",null,"Whether to place label at the top of form field or side-by-side fashion. Defaults to ",(0,n.yg)("code",null,"false"),"."))),(0,n.yg)("tr",null,(0,n.yg)("td",null,"[options.mode]"),(0,n.yg)("td",null,(0,n.yg)("code",null,"string")),(0,n.yg)("td",null,(0,n.yg)("p",null,"Controls rendering of the form. Possible values are ",(0,n.yg)("code",null,"'create', 'read', 'update'"),". Defaults to ",(0,n.yg)("code",null,"update"),". The",(0,n.yg)("code",null,"read")," mode renders a readonly form. Whereas, the ",(0,n.yg)("code",null,"update")," & ",(0,n.yg)("code",null,"create")," mode are equivalent and allows form field value modification. The difference between ",(0,n.yg)("code",null,"update")," and ",(0,n.yg)("code",null,"create")," is that form is initially not validated for required values and other conditions for ",(0,n.yg)("code",null,"create")," mode until user starts to interact with the form."))),(0,n.yg)("tr",null,(0,n.yg)("td",null,"[options.layoutMode]"),(0,n.yg)("td",null,(0,n.yg)("code",null,"string")),(0,n.yg)("td",null,(0,n.yg)("p",null,"Whether to layout the form in a single or double column fashion. Supported values are ",(0,n.yg)("code",null,"'singleCol', 'doubleCol'"),". Defaults to ",(0,n.yg)("code",null,"singleCol"),"."))),"  ")),(0,n.yg)("a",{name:"module_FormView..FormValidationCallback"}),(0,n.yg)("h3",{id:"formviewformvalidationcallback--function"},"FormView~FormValidationCallback : ",(0,n.yg)("code",null,"function")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Kind"),": inner typedef of ",(0,n.yg)("a",{parentName:"p",href:"#module_FormView"},(0,n.yg)("code",null,"FormView")),"  "),(0,n.yg)("table",null,(0,n.yg)("thead",null,(0,n.yg)("tr",null,(0,n.yg)("th",null,"Param"),(0,n.yg)("th",null,"Type"),(0,n.yg)("th",null,"Description"))),(0,n.yg)("tbody",null,(0,n.yg)("tr",null,(0,n.yg)("td",null,"isValid"),(0,n.yg)("td",null,(0,n.yg)("code",null,"Boolean")),(0,n.yg)("td",null,(0,n.yg)("p",null,"Whether the form is valid."))),"  ")))}y.isMDXComponent=!0}}]);