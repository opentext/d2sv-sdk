"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[6198],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var o=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=d(n),u=a,m=g["".concat(s,".").concat(u)]||g[u]||c[u]||i;return n?o.createElement(m,r(r({ref:t},p),{},{components:n})):o.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:a,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=n(8168),a=(n(6540),n(5680));const i={sidebar_position:1.02,sidebar_label:"Customize dialog response",description:"Control what happens at the end of a dialog execution"},r="Customizing Dialog response",l={unversionedId:"general/howto/d2fsdialog/1_02_custom_dialog",id:"general/howto/d2fsdialog/1_02_custom_dialog",title:"Customizing Dialog response",description:"Control what happens at the end of a dialog execution",source:"@site/articles/general/howto/d2fsdialog/1_02_custom_dialog.md",sourceDirName:"general/howto/d2fsdialog",slug:"/general/howto/d2fsdialog/1_02_custom_dialog",permalink:"/d2sv-sdk/25.2.0/general/howto/d2fsdialog/1_02_custom_dialog",draft:!1,tags:[],version:"current",sidebarPosition:1.02,frontMatter:{sidebar_position:1.02,sidebar_label:"Customize dialog response",description:"Control what happens at the end of a dialog execution"},sidebar:"general",previous:{title:"Set form mode for D2FS dialog",permalink:"/d2sv-sdk/25.2.0/general/howto/d2fsdialog/1_01_assign_form_mode_for_chained_dialogs"},next:{title:"Externalize dialog parameters",permalink:"/d2sv-sdk/25.2.0/general/howto/d2fsdialog/1_03_externalize_dialog_parameters"}},s={},d=[{value:"Methods of the dialog",id:"methods-of-the-dialog",level:2},{value:"How to communicate the final outcome of a dialog execution",id:"how-to-communicate-the-final-outcome-of-a-dialog-execution",level:2},{value:"Overriding the default post action behavior",id:"overriding-the-default-post-action-behavior",level:2},{value:"Passing additional data to the UI",id:"passing-additional-data-to-the-ui",level:2}],p={toc:d},g="wrapper";function c(e){let{components:t,...n}=e;return(0,a.yg)(g,(0,o.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"customizing-dialog-response"},"Customizing Dialog response"),(0,a.yg)("p",null,"This topic focuses on how to influence the UI behavior of a D2FS dialog from its server-side component especially the end\noutcome of a dialog. The server-side component is identified by the Java class having name same as the dialog itself and that\nimplements ",(0,a.yg)("inlineCode",{parentName:"p"},"ID2Dialog")," interface of the D2-API. In this topic, we refer to the server-side component as the dialog itself."),(0,a.yg)("h2",{id:"methods-of-the-dialog"},"Methods of the dialog"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"buildDialog(...)"),"  : This method is called while creating/recreating the Dialog presentation any time during an execution."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"validDialog(...)"),"  : This method is called with the intention of validating current data state and/or running a positive flow logic when user wants to move forward with the dialog execution."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"cancelDialog(...)")," : This method is called with the intention of cleanup and/or running a cancellation/negative flow logic, when user wants to stop/cancel the dialog execution.")),(0,a.yg)("h2",{id:"how-to-communicate-the-final-outcome-of-a-dialog-execution"},"How to communicate the final outcome of a dialog execution"),(0,a.yg)("p",null,"There are 2 types of interactions that can be provided for the success message."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Alert")," : if the developer wants to show an alert message popup post operation.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'       XmlNode result = super.validDialog(context);\n       XmlNode msg = new XmlNodeImpl("message");\n       msg.setValue("Processed Successfully");\n       msg.setAttribute("type", "alert");\n       msg.setAttribute("title", "Success");\n       result.appendXmlNode(msg);\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Sample Output")," :"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'   "page-content": {\n        "success": {\n            "message": {\n                "content": "Processed Successfully",\n                "order": 1,\n                "title": "Success",\n                "type": "alert"\n            }\n        }\n    }\n')),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Toast")," : if the developer wants to show a toast message on top of the screen.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'       XmlNode result = super.validDialog(context);\n       XmlNode msg = new XmlNodeImpl("message");\n       msg.setValue("Processed Successfully");\n       msg.setAttribute("type", "toast");\n       msg.setAttribute("title", "Success");\n       result.appendXmlNode(msg);\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Sample Output")," :"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'   "page-content": {\n        "success": {\n            "message": {\n                "content": "Processed Successfully",\n                "order": 1,\n                "title": "Success",\n                "type": "toast"\n            }\n        }\n    }\n')),(0,a.yg)("p",null,"Where"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"message")," is child node of success, and it is mandatory which is having their content as Value. This is the communication message shown in the UI."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"type")," is also a mandatory key which allow either ",(0,a.yg)("inlineCode",{parentName:"li"},"alert/toast")," as value. An ",(0,a.yg)("inlineCode",{parentName:"li"},"alert")," is shown as a mini popup where as ",(0,a.yg)("inlineCode",{parentName:"li"},"toast")," is shown as a banner in UI."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"title")," is an optional parameter. It is set only when  ",(0,a.yg)("inlineCode",{parentName:"li"},"type='alert'")," and it is displayed as the title for the alert popup in UI.")),(0,a.yg)("h2",{id:"overriding-the-default-post-action-behavior"},"Overriding the default post action behavior"),(0,a.yg)("p",null,"There are basically 3 types of post action that can be performed on the selected objects\nafter the completion of the dialog service operation. Those operation can be set as an attribute\nto the result before returning in the case of ",(0,a.yg)("strong",{parentName:"p"},"validDialog(.)")," and ",(0,a.yg)("strong",{parentName:"p"},"cancelDialog(.)")),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Locate content and refresh state upon action")," :\tThis will locate the object and update the state of the object\nselected. For example, if you are performing some operation which will move the selected object from\none location to another. Then this attribute will help the user to identify where it is located\nas well as refreshing the state of the current container. Attribute used for this is ",(0,a.yg)("inlineCode",{parentName:"li"},"locateAndRefresh")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Refresh state")," : This will refresh the state of the object selected post dialog operation. For example,\nif you have performed a lifecycle operation or a property update as part of the ",(0,a.yg)("strong",{parentName:"li"},"validDialog(.)")," then\nif you want to have the updated menus as well as values  in the selected item in the widget we would need\nto set this value as part fo the result. Attribute used for this is ",(0,a.yg)("inlineCode",{parentName:"li"},"refreshCheckoutState")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Refresh widget")," : This will reload the widget post the operation. Attribute used for this is ",(0,a.yg)("inlineCode",{parentName:"li"},"refreshWidget"))),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Sample Code")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'       XmlNode result = super.validDialog(context); \n        result.setAttribute("locateAndRefresh", "true"); \n        result.setAttribute("refreshCheckoutState", "true"); \n        result.setAttribute("refreshWidget","true"); \n        return result; \n')),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("ol",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ol"},'Supported values are "true"/"false".'),(0,a.yg)("li",{parentName:"ol"},"Default value if not set is false."))),(0,a.yg)("h2",{id:"passing-additional-data-to-the-ui"},"Passing additional data to the UI"),(0,a.yg)("p",null,"Any attribute added to the top-level XML node from the output of ",(0,a.yg)("inlineCode",{parentName:"p"},"validDialog()")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"cancelDialog()")," will be extracted on the UI\nside and merged onto the form data earlier collected in UI. E.g., in the following code snippet, before dialog validation if\nthe form data contains ",(0,a.yg)("inlineCode",{parentName:"p"},"prop1")," but after the validation it has ",(0,a.yg)("inlineCode",{parentName:"p"},"prop2")," that was propagated from ",(0,a.yg)("inlineCode",{parentName:"p"},"validDialog()")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'// In the dialog\'s Java class file\npublic XmlNode validDialog(D2fsContext context) throws Exception {\n    XmlNode result = super.validDialog(context);\n    result.setAttribute("prop2", "value2");\n    return result;\n}\n\n//In the dialog\'s customized action code\nimport DialogAction from \'d2/sdk/controls/dialogs/generic/dialog.action\';\nclass CustomValidateAction extends DialogAction {\n    execute(options) {\n        const {formView, dialogState} = optionns;\n        return formView.validateForm(true)\n            .then(isValid => {\n                if(isValid) {\n                    const formValues = {prop1: \'value1\'}; // Suppose this is the literal form values we are passing to back-end\n                    return dialogState.validateForm(formValues)\n                        .then(formData => {\n                            console.log(JSON.stringify(formValues)); // Prints {prop1: "value1", prop2: "value2"}\n                            dialog.close();\n                        });\n                }\n            });\n    }\n}\n')))}c.isMDXComponent=!0}}]);