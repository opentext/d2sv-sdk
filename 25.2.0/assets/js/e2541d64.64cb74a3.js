"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[5288],{5680:(e,t,a)=>{a.d(t,{xA:()=>d,yg:()=>u});var r=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=p(a),m=n,u=g["".concat(s,".").concat(m)]||g[m]||c[m]||o;return a?r.createElement(u,i(i({ref:t},d),{},{components:a})):r.createElement(u,i({ref:t},d))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7826:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=a(8168),n=(a(6540),a(5680));const o={sidebar_position:1.03,sidebar_label:"Externalize dialog parameters",description:"Control dialog behavior without code change, leverage OOTB dialogs"},i="Externalizing dialog parameters",l={unversionedId:"general/howto/d2fsdialog/1_03_externalize_dialog_parameters",id:"general/howto/d2fsdialog/1_03_externalize_dialog_parameters",title:"Externalizing dialog parameters",description:"Control dialog behavior without code change, leverage OOTB dialogs",source:"@site/articles/general/howto/d2fsdialog/1_03_externalize_dialog_parameters.md",sourceDirName:"general/howto/d2fsdialog",slug:"/general/howto/d2fsdialog/1_03_externalize_dialog_parameters",permalink:"/d2sv-sdk/25.2.0/general/howto/d2fsdialog/1_03_externalize_dialog_parameters",draft:!1,tags:[],version:"current",sidebarPosition:1.03,frontMatter:{sidebar_position:1.03,sidebar_label:"Externalize dialog parameters",description:"Control dialog behavior without code change, leverage OOTB dialogs"},sidebar:"general",previous:{title:"Customize dialog response",permalink:"/d2sv-sdk/25.2.0/general/howto/d2fsdialog/1_02_custom_dialog"},next:{title:"Java Assistance type support for multi value list",permalink:"/d2sv-sdk/25.2.0/general/howto/d2fsdialog/1_04_java_assistance_support_multivalue_list"}},s={},p=[{value:"Means of parameter definition",id:"means-of-parameter-definition",level:2},{value:"Leveraging <em>PropertiesDialog</em> for customization",id:"leveraging-propertiesdialog-for-customization",level:2}],d={toc:p},g="wrapper";function c(e){let{components:t,...a}=e;return(0,n.yg)(g,(0,r.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"externalizing-dialog-parameters"},"Externalizing dialog parameters"),(0,n.yg)("p",null,"When a D2FS dialog is getting built, it can take a set of input parameters under consideration.\nDepending on implementation and business logic of a dialog, such input parameter can control how the dialog is built and how\nit behaves post build, during validation or cancellation."),(0,n.yg)("h2",{id:"means-of-parameter-definition"},"Means of parameter definition"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Coding")," - On the client-side, ",(0,n.yg)("a",{parentName:"li",href:"/api/d2/controls/dialogs/generic/dialog.action"},"DialogAction")," or ",(0,n.yg)("a",{parentName:"li",href:"/api/d2/controls/dialogs/generic/dialog.state.method"},"StateMethod")," relevant for a dialog can literally construct such\nparameter set in the code and pass it off to server-side."),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Configuration")," - As dialog execution almost always starts from a menu item. The configuration for the menu item can\ndeclare parameters and their values through ",(0,n.yg)("inlineCode",{parentName:"li"},"message")," field in D2-Config. If present, these parameters are automatically\npassed off to server-side.")),(0,n.yg)("p",null,"Externalizing dialog parameters refers to the ",(0,n.yg)("strong",{parentName:"p"},"Configuration")," method."),(0,n.yg)("admonition",{type:"tip"},(0,n.yg)("p",{parentName:"admonition"},"Two common input parameters ",(0,n.yg)("inlineCode",{parentName:"p"},"form_mode")," & ",(0,n.yg)("inlineCode",{parentName:"p"},"viewMode")," exists for all dialogs. The former controls ",(0,n.yg)("em",{parentName:"p"},"readonly")," vs ",(0,n.yg)("em",{parentName:"p"},"editable")," view\nof a dialog whereas the latter controls ",(0,n.yg)("em",{parentName:"p"},"modal popup")," vs ",(0,n.yg)("em",{parentName:"p"},"side-panel")," based appearance of the dialog. Point to remember though - once\ndialog execution starts, and it becomes visible on the UI, then changing these parameter values would have no effect till the end of execution")),(0,n.yg)("admonition",{type:"info"},(0,n.yg)("p",{parentName:"admonition"},"In a multi-dialog business flow, the entire input form data collected in a dialog, is passed-off to the next possible dialog\nas input parameter.")),(0,n.yg)("h2",{id:"leveraging-propertiesdialog-for-customization"},"Leveraging ",(0,n.yg)("em",{parentName:"h2"},"PropertiesDialog")," for customization"),(0,n.yg)("p",null,"In case if the business requirement for the dialog is simple and doesn't require a lot of customization. Then developer\ncan use the OOTB ",(0,n.yg)("inlineCode",{parentName:"p"},"PropertiesDialog")," to map a property page config present in the system. This can be done as part of menus configuration\nto showDialog. ",(0,n.yg)("inlineCode",{parentName:"p"},"property_config")," input parameter can be defined as part of the message parameter which will drive the customization.\nAdditional parameters can also be passed.This will help development in 2 ways."),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Instead of matrix evaluated property page, admins can now point to a different property page"),(0,n.yg)("li",{parentName:"ol"},"Along with the property page config if there are other custom parameters that can be used to drive a customization in the\nD2DialogServicePlugin which will have access to those custom parameters as well as the property page values. Thus, developers can write their\ncustom operation in D2SFS overrides.")))}c.isMDXComponent=!0}}]);