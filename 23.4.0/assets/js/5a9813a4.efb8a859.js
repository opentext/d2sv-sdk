"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=o.createContext({}),s=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=s(e.components);return o.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),g=r,f=c["".concat(d,".").concat(g)]||c[g]||u[g]||i;return n?o.createElement(f,a(a({ref:t},m),{},{components:n})):o.createElement(f,a({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=g;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6350:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1.07,sidebar_label:"Set form mode for D2FS dialog"},a="Set form mode for D2FS dialog",l={unversionedId:"general/howto/1_07_assign_form_mode_for_chained_dialogs",id:"general/howto/1_07_assign_form_mode_for_chained_dialogs",title:"Set form mode for D2FS dialog",description:"Forms in D2FS dialogs can be rendered in either editable(create) or readonly(read) mode.",source:"@site/articles/general/howto/1_07_assign_form_mode_for_chained_dialogs.md",sourceDirName:"general/howto",slug:"/general/howto/1_07_assign_form_mode_for_chained_dialogs",permalink:"/d2sv-sdk/23.4.0/general/howto/1_07_assign_form_mode_for_chained_dialogs",draft:!1,tags:[],version:"current",sidebarPosition:1.07,frontMatter:{sidebar_position:1.07,sidebar_label:"Set form mode for D2FS dialog"},sidebar:"general",previous:{title:"Upgrade SDK workspace/plugins",permalink:"/d2sv-sdk/23.4.0/general/howto/1_06_upgrade_workspace"},next:{title:"Custom Dialog",permalink:"/d2sv-sdk/23.4.0/general/howto/1_08_custom_dialog"}},d={},s=[],m={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"set-form-mode-for-d2fs-dialog"},"Set form mode for D2FS dialog"),(0,r.kt)("p",null,"Forms in D2FS dialogs can be rendered in either editable(",(0,r.kt)("code",null,"create"),") or readonly(",(0,r.kt)("code",null,"read"),") mode."),(0,r.kt)("p",null,"When rendering a dialog form on D2 Smartview UI, this is determined by checking for the form_mode attribute of dialog\nxml."),(0,r.kt)("p",null,"When creating a D2FS dialog, the workspace assistant prompts user to select the form_mode. The selected value from\nworkspace assistant is set in the dialog definition xml file\n",(0,r.kt)("inlineCode",{parentName:"p"},"<Plugins Directory>\\src\\main\\resources\\xml\\dialog\\<Dialog Name>.xml"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<dialog auto_smartview_edit_mode="false" buttons_right="false" focus="" height="500" id="SomeDialog" initial_invalid="false" resizable="true" signoff_creation="false" signoff_edit="false" signoff_import="false" signoff_intention_dictionary="" signoff_intention_required="false" width="400" form_mode="create">\n  <content>\n    <text advancedView_required="true" condition_required="true" control="true" id="name_field"/>\n  </content>\n  <buttons>\n    <button action="validDialog()" id="buttonOk" isPrimary="true"/>\n    <button action="cancelDialog()" id="buttonCancel"/>\n  </buttons>\n  <signoff_fallback_message>\n    <message locale="en" value=""/>\n  </signoff_fallback_message>\n</dialog>\n')),(0,r.kt)("p",null,"But this can be overwritten later either by editing the dialog definition xml file or\nby setting ",(0,r.kt)("code",null,"form_mode")," attribute for ",(0,r.kt)("code",null,"result")," XmlNode in ",(0,r.kt)("code",null,"buildDialog")," method of\n",(0,r.kt)("inlineCode",{parentName:"p"},"<Plugins Directory>\\src\\main\\java\\<Maven Group Id>\\smartview\\<Plugin Name>\\dialogs\\<Dialog Name>.java")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'public class SomeDialog extends AbstractDialog implements ID2Dialog {\n    ...\n    @Override\n    public XmlNode buildDialog(D2fsContext context, List<Attribute> attributes) throws Exception {\n        ...\n        XmlNode result = super.buildDialog(context, dialogFile, labelsBundle, context.getFirstObject(), defaultValues);\n\n        if(result == null) {\n            result = super.buildDialog(context, attributes);\n        }\n        \n        // Custom logic to determine formMode at run time\n        String formMode = 1 == 0 ? "read" : "create";\n        \n        result.setAttribute("form_mode", formMode);\n\n        return result;\n    }\n    ...    \n}\n')),(0,r.kt)("p",null,"In case of chained dialogs, if the chained dialog is returned as result from ",(0,r.kt)("code",null,"validDialog")," method of\n",(0,r.kt)("inlineCode",{parentName:"p"},"<Plugins Directory>\\src\\main\\java\\<Maven Group Id>\\smartview\\<Plugin Name>\\dialogs\\<Dialog Name>.java"),","),(0,r.kt)("code",null,"form_mode")," attribute could be set for ",(0,r.kt)("code",null,"result")," XmlNode before returning it.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'public class SomeDialog extends AbstractDialog implements ID2Dialog {\n    ...\n    @Override\n    public XmlNode validDialog(D2fsContext context) throws Exception {\n        ...\n        XmlNode result = super.validDialog(context);\n\n        // Custom logic to determine formMode at run time\n        String formMode = 1 == 0 ? "read" : "create";\n        \n        result.setAttribute("form_mode", formMode);\n        \n        return result;\n    }\n    ...    \n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("code",null,"form_mode")," attribute for chained dialog could also be set from ",(0,r.kt)("code",null,"validDialog")," method of\n",(0,r.kt)("inlineCode",{parentName:"p"},"<Plugins Directory>\\src\\main\\java\\com\\opentext\\d2\\smartview\\webfs\\dialog\\D2DialogServicePlugin.java"),"\nbefore returning the dialog."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'public class D2DialogServicePlugin extends D2DialogService implements ID2fsPlugin {\n    ...\n    public Dialog validDialog(Context context, String id, String dialogName, List<Attribute> parameters) throws Exception {\n        \n        // Custom logic\n        \n        Dialog dialog = super.validDialog(context, id, dialogName, parameters);\n        \n        XmlNode xmlDialog = XmlUtil.loadFromString(dialog.getXmlContent()).getRootXmlNode();\n        \n        // Custom logic to determine formMode at run time\n        String formMode = 1 == 0 ? "read" : "create";\n        \n        xmlDialog.setAttribute("form_mode", formMode);\n        \n        dialog.setXmlContent(xmlDialog.toString());\n\n        return dialog;\n    }\n    ...\n}\n')))}u.isMDXComponent=!0}}]);